local user 			= require "Data_Character"
local dbase 		= require "DataManager" .dbase

local manager 		= require "CharacterUseSkill"

local this={}
local med
local class 		= require "Class"
local item 			= class("ControlMediator_SkillItem")
local GameTicker 	= require "GameTicker"
local TableEvent 	= require "EventType".TableEvent
local DataClasses 	= require "DataClasses"

local log 			= require "Logger"

function item.createItem()
	return item.new()
end

function item.pickPrefab(pane,data,index)
	return index == 0 and 0 or 1
end

function item:draw(cell,data)
	-- cell:SetString("txt",data.name)
	cell:SetClickTrigger("icon")
	cell:SetString("icon",data.icon)
end

function item:onInit(cell,data)
	self.data = data
	self.cell = cell
	GameTicker.normalTicker:add(self)
	self.isShowCD = true
end

function item:updateNow(now)
	local fireTime = self.data.fireTime
	-- local dif = now - fireTime
	-- local cd = self.data.cooldown
	-- local dif = now - fireTime
	local cd = self.data.cooldown
	local difCD = cd - now
	if difCD < 0 then
		difCD = 0
		if self.isShowCD then
			self.isShowCD = false
			self.cell:SetActive("cover",self.isShowCD)
			return
		end
	else
		if not self.isShowCD then
			self.isShowCD = true
			self.cell:SetActive("cover",self.isShowCD)
		end
	end

	-- print("name:"..self.data.name..difCD)
	local cdLen = self.data.setToCooldown *1000
	local result = difCD / cdLen

	if result > 0 then
		log.log(string.format("cd rate:%s",result))
	end

	self.cell:SetFloat("cover",result)
end

function item:onRemove()
	GameTicker.normalTicker:remove(self)
end

function item:onClick(_,data)
	manager.tryCast(data)
end

local function onClick(_,data)
	print("onClick")
	manager.tryCast(data)
end

local function resetPane()
	local h = user.hero
	if h then
		med:SetList("pane",h:getSkills())
	else
		med:SetList("pane",nil)
	end
end

local function onTableUpdate()
	resetPane()
end
local function onHeroUpdate(p)
	if p == "heroId" then
		resetPane()
	end
end

function this:show()
	dbase:getTable(DataClasses.DATA_SKILLOBJ):addListener(TableEvent.UPDATE,self, onTableUpdate)
	dbase:getTable(DataClasses.DATA_USERHERO):addListener(TableEvent.UPDATE,self, onTableUpdate)
	user:addListener(self,onHeroUpdate)
	resetPane()
end

function this:hide()
	med:SetList("pane",nil)
	dbase:getTable(DataClasses.DATA_SKILLOBJ):removeListener(TableEvent.UPDATE,self, onTableUpdate)
	dbase:getTable(DataClasses.DATA_USERHERO):removeListener(TableEvent.UPDATE,self, onTableUpdate)
	user:removeListener(self,onHeroUpdate)
end

function this:initView(mediator)
	med = mediator
	med:SetPaneFactory("pane",item)
	-- med:AddListener("pane",onClick)
end

return this;
