local this={}
local _meta={}
local med
local heroPane

local TypeClasses	= require "TypeClasses"
local TypeDB		= require "TypeDB"
local ns 			= require "CSNamespace"
local panel  		= ns["PanelManager"]
local native 		= ns.NativeManager

local LoginTools 	= require "LoginTools"
local loginNet 		= require "loginNet"

local Logger 		= require "Logger"
local dialog 		= require "Dialog"

local error			= require "ErrorCenter"

local GameTicker    = require "GameTicker"

local LangManager 	= require "LangManager"

local Array 		= require "Array"
local trait 		= Array()
local lastName 		= Array()
local firstName 	= Array()
local heroId
local namePreview	= nil
local nameReg = "<*>*%s*[.]*[ã€€]*"

--Grid
local heroItem={}
function heroItem.draw(_,cell,data)
	cell:SetString("icon",data.icon)
end

function heroItem.onInit(_,cell)
	cell:SetClickTrigger("icon")
end

local function updateHeroModel(hero)
	med:PlayPortrait(hero.portrait,hero.showFx)
end

local function updateHeroInfo(startHero)
	med:SetString("obj_0/icon",startHero.icon)
	med:SetString("obj_0/txt",startHero.name)
	med:SetString("obj_0/area",startHero.desc)
	heroId = startHero.heroId
end

local function saveRandomNameMsg()
	local nameArr=TypeDB.toArray(TypeClasses.TYPE_RANDOMNAME)
	for k,v in pairs(nameArr) do
		if v.position == 0 then
			trait:insert(v.word)
		elseif v.position ==1 then
			lastName:insert(v.word)
		else
			firstName:insert(v.word)
		end
	end
end

local function randomName()
	local nameNow
	while true do
		local traitTemp = trait[math.random(#trait)]
		local lastNameTemp = lastName[math.random(#lastName)]
		local firstNameTemp = firstName[math.random(#firstName)]
		nameNow = string.format("%s%s%s",traitTemp,lastNameTemp,firstNameTemp)
		if nameNow ~= namePreview then break end
	end
	namePreview = nameNow
	med:SetString("obj_2/txt",nameNow)
end

local function checkName(str)
	for k in string.gmatch(str, nameReg) do
		if #k ~= 0 then
			return false;
		end
	end
	return true
end

local function onBtnClick(btn)
	if btn=="btn_0" then
		randomName()
	elseif btn=="btn_1" then
		local name=med:GetString("obj_2/txt")
		if #name~=0 then
			local isRight = checkName(name)
			if isRight then
				Logger:log("name format right!")
				loginNet.startUserRegister(name,string.format('%s',heroId))
			else
				Logger:log("name format error!")
				dialog.askByType(LangManager.get("Login.illegal_character"),dialog.TYPE_ONEBTN)
			end
		else
			Logger:log("please enter name")
			dialog.askByType(LangManager.get("Login.please_inputName"),dialog.TYPE_ONEBTN)
		end
	end
end

local function onHeroItemClick(_,evt)
	updateHeroModel(evt.data.hero)
	updateHeroInfo(evt.data)
end

local function onBackBtnClick()
	LoginTools.askLogout(
		function (r)
			if r then
				LoginTools.doLogout();
				med.Hide(med);
			end
		end
	)
end

local function  onErrorReceived(err)
	print("create med", err.code, err.msg)
	if err.code == 30003 then
		dialog.askByType(LangManager.get("Login.name_isUsed"),dialog.TYPE_ONEBTN)
	end
end

--Mediator
function this.show()
	panel.Close("LoginPanel_login")

	local startHeroArr=TypeDB.toArray(TypeClasses.TYPE_STARTHERO)
	med:SetList("obj_1/pane",startHeroArr)
	med:SetInt("obj_1/pane",0)

	namePreview = med:GetString("obj_2/txt")
	local time = tonumber(tostring(GameTicker.time):reverse():sub(4, 12))
	math.randomseed(time)
	randomName()

	heroPane.selectedData=startHeroArr[1]
	updateHeroModel(startHeroArr[1].hero)
	updateHeroInfo(startHeroArr[1])
	error.addListener(onErrorReceived,this)
end

function this.hide()
	med:SetList("obj_1/pane",nil)
	error.removeListener(onErrorReceived)
end

function this.initView(_,meditor)
	med=meditor
	med:AddListener("obj_2/btn_0",onBtnClick)
	med:AddListener("obj_2/btn_1",onBtnClick)
	med:AddListener("obj_3/btn",onBackBtnClick)
	
	med:SetPaneFactory("obj_1/pane",heroItem)
	heroPane=med:AddListener("obj_1/pane",onHeroItemClick)
	saveRandomNameMsg()
end

return this