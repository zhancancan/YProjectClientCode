//this source code was auto-generated, do not modify it
using pure.refactor.property;
using pure.stateMachine.machine.core;
using System;
using game.entity.game.machine.actions.bundle.copy;
using game.entity.game.machine.actions.bundle.load;
using game.entity.game.machine.actions.critical;
using game.entity.game.machine.actions.display;
using game.entity.game.machine.actions.http;
using game.entity.game.machine.actions.initor;
using game.entity.game.machine.actions.initor.data;
using game.entity.game.machine.actions.initor.lua;
using game.entity.game.machine.actions.lang;
using game.entity.game.machine.actions.load;
using game.entity.game.machine.actions.login;
using game.entity.game.machine.condition;
using game.entity.scene.machine.actions;
using pure.ai.aimachine.core.action;
using pure.ai.aimachine.core.condition;
using pure.ai.aimachine.host.actions;
using pure.ai.aimachine.host.condition;
using pure.stateMachine.share.actions;
using pure.stateMachine.share.condition;
using pure.treeComp.firefx.action;
using pure.treeComp.firefx.bullet;
using pure.treeComp.firefx.core;
using pure.treeComp.firefx.emitter;
using pure.treeComp.firefx.sequence;
using pure.treeComp.panel;
using machine.ai;
using pure.entity.renderer;
using pure.utils.enumeration;
using pure.utils.timeScale;
using pure.entity.animation;
using UnityEngine;
using pure.entity.core;
using pure.utils.tween;
using pure.mvc.view;
using pure.ui.element;
using pure.scene.manager;
using pure.asset.manager;
namespace registerWrap {
	public class PropertyWrap{

        private static bool register;
        public static void Init(){
            if(!register){  
                new PropertyWrap().Register();
            }
            register = true;
        }
		private RuntimePropertyInfo _info =new RuntimePropertyInfo();


        private void Register(){  
            RegProperty();
        }
		internal void RegProperty(){
			EditableProperty.ClearPropertyCache();
			LoginAct_CopyBundle_PropertyWrap();
			LoginAct_LoadBundleFiles_PropertyWrap();
			LoginAct_ForceReInstall_PropertyWrap();
			LoginAct_EnterLogoHide_PropertyWrap();
			LoginAct_EnterLogoShow_PropertyWrap();
			LoginAct_PreloadHide_PropertyWrap();
			LoginAct_PreloadShow_PropertyWrap();
			LoginAct_GetConfig_PropertyWrap();
			LoginAct_InitDiagram_PropertyWrap();
			LoginAct_InitMachine_PropertyWrap();
			LoginAct_InitMainUI_PropertyWrap();
			LoginAct_InitMediator_PropertyWrap();
			LoginAct_InitScreen_PropertyWrap();
			LoginAct_InitShader_PropertyWrap();
			LoginAct_InitStyle_PropertyWrap();
			LoginAct_InitTree_PropertyWrap();
			LoginAct_ReadLocalAssetManager_PropertyWrap();
			LoginAct_InitData_PropertyWrap();
			LoginAct_InitLua_PropertyWrap();
			LoginAct_InitLang_PropertyWrap();
			LoginAct_LoadVersion_PropertyWrap();
			LoginAct_SdkLogin_PropertyWrap();
			LoginCon_IsLowCritical_PropertyWrap();
			LoginCon_IsNewPlayer_PropertyWrap();
			LoginCon_IsStreamHigh_PropertyWrap();
			LoginCon_IsVersionUpdate_PropertyWrap();
			SceneAct_BuildPlace_PropertyWrap();
			SceneAct_ClearData_PropertyWrap();
			SceneAct_ClearEntity_PropertyWrap();
			SceneAct_ClearFinal_PropertyWrap();
			SceneAct_ClearMemory_PropertyWrap();
			SceneAct_DestroyPrev_PropertyWrap();
			SceneAct_LoadComplete_PropertyWrap();
			SceneAct_LoadPlace_PropertyWrap();
			SceneAct_LoadScene_PropertyWrap();
			SceneAct_OpenPanel_PropertyWrap();
			SceneAct_ClosePanel_PropertyWrap();
			SceneAct_ParseGeometry_PropertyWrap();
			SceneAct_TransitionHide_PropertyWrap();
			SceneAct_TransitionShow_PropertyWrap();
			AIAct_FightStatus_PropertyWrap();
			AIAct_InitCameraFollow_PropertyWrap();
			AIAct_InitChildRenderer_PropertyWrap();
			AIAct_InitLabel_PropertyWrap();
			AIAct_InitRenderer_PropertyWrap();
			AIAct_Jump_PropertyWrap();
			AIAct_ParameterSet_PropertyWrap();
			AIAct_PathFinder_PropertyWrap();
			AIAct_PathSourcePickup_PropertyWrap();
			AIAct_SetAnimatorBool_PropertyWrap();
			AICon_HasJumpPoint_PropertyWrap();
			AICon_RuntimeParameter_PropertyWrap();
			HostAct_Dead_PropertyWrap();
			HostAct_FireSkill_PropertyWrap();
			HostAct_Gather_PropertyWrap();
			HostAct_PathMove_PropertyWrap();
			HostAct_PushListener_PropertyWrap();
			HostAct_PushMove_PropertyWrap();
			HostAct_Stand_PropertyWrap();
			HostCon_OnEntityClick_PropertyWrap();
			HostCon_OnGroudClick_PropertyWrap();
			CpxParameter_PropertyWrap();
			CpxState_Action_PropertyWrap();
			CpxState_Any_PropertyWrap();
			CpxState_Exit_PropertyWrap();
			CpxState_Machine_PropertyWrap();
			CpxTransition_PropertyWrap();
			CpxAct_Lua_PropertyWrap();
			CpxAct_Nothing_PropertyWrap();
			CpxAct_SetInited_PropertyWrap();
			CpxCondition_Any_PropertyWrap();
			CpxCondition_IsCpxInited_PropertyWrap();
			CpxCondition_Lua_PropertyWrap();
			CpxCondition_Parameter_PropertyWrap();
			FireFx_Animation_PropertyWrap();
			FireFx_ChangeWeapon_PropertyWrap();
			FireFx_Hit_PropertyWrap();
			FireFx_Move_PropertyWrap();
			FireFx_Pull_PropertyWrap();
			FireFx_TimeScale_PropertyWrap();
			BulletFx_BoneBoundler_PropertyWrap();
			BulletFx_Chain_PropertyWrap();
			BulletFx_Create_PropertyWrap();
			BulletFx_Fall_PropertyWrap();
			BulletFx_Fly_PropertyWrap();
			BulletFx_Follow_PropertyWrap();
			BulletFx_LookAt_PropertyWrap();
			BulletFx_Parabola_PropertyWrap();
			BulletFx_Play_PropertyWrap();
			BulletFx_Seek_PropertyWrap();
			BulletFx_Tween_PropertyWrap();
			BulletPos_Area_PropertyWrap();
			BulletPos_DividSpace_PropertyWrap();
			BulletPos_Line_PropertyWrap();
			BulletPos_Ring_PropertyWrap();
			BulletPos_Sector_PropertyWrap();
			FireFxRoot_PropertyWrap();
			BulletEmitter_Line_PropertyWrap();
			BulletEmitter_Normal_PropertyWrap();
			FireFx_Parallel_PropertyWrap();
			FireFx_Phase_PropertyWrap();
			FireFx_Sequence_PropertyWrap();
			PanelSetting_ChildSelect_PropertyWrap();
			PanelSetting_ChildStack_PropertyWrap();
			PanelSetting_Scene_PropertyWrap();
			PanelSetting_AutoClose_PropertyWrap();
			PanelSetting_Lua_PropertyWrap();
			PanelSetting_Cull_PropertyWrap();
			PanelSetting_Module_PropertyWrap();
			PanelSetting_Panel_PropertyWrap();
			AICommand_Move_PropertyWrap();
			AICommand_MoveElastic_PropertyWrap();
			AICommand_Stand_PropertyWrap();
			AICommand_SteerMove_PropertyWrap();
			AICommand_TestMove_PropertyWrap();
		}
		private void LoginAct_CopyBundle_PropertyWrap(){
			Type t = typeof(LoginAct_CopyBundle);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((LoginAct_CopyBundle)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_CopyBundle) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_CopyBundle)b).priority=((LoginAct_CopyBundle)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginAct_CopyBundle)a).luaFile = (string) b;};
			_info.getter = a =>((LoginAct_CopyBundle) a).luaFile;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((LoginAct_CopyBundle)b).luaFile=((LoginAct_CopyBundle)a).luaFile;};
			list[1] = new EditableProperty("luaFile",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_LoadBundleFiles_PropertyWrap(){
			Type t = typeof(LoginAct_LoadBundleFiles);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((LoginAct_LoadBundleFiles)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_LoadBundleFiles) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_LoadBundleFiles)b).priority=((LoginAct_LoadBundleFiles)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginAct_LoadBundleFiles)a).luaFile = (string) b;};
			_info.getter = a =>((LoginAct_LoadBundleFiles) a).luaFile;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((LoginAct_LoadBundleFiles)b).luaFile=((LoginAct_LoadBundleFiles)a).luaFile;};
			list[1] = new EditableProperty("luaFile",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_ForceReInstall_PropertyWrap(){
			Type t = typeof(LoginAct_ForceReInstall);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((LoginAct_ForceReInstall)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_ForceReInstall) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_ForceReInstall)b).priority=((LoginAct_ForceReInstall)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginAct_ForceReInstall)a).panel = (string) b;};
			_info.getter = a =>((LoginAct_ForceReInstall) a).panel;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((LoginAct_ForceReInstall)b).panel=((LoginAct_ForceReInstall)a).panel;};
			list[1] = new EditableProperty("panel",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_EnterLogoHide_PropertyWrap(){
			Type t = typeof(LoginAct_EnterLogoHide);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((LoginAct_EnterLogoHide)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_EnterLogoHide) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_EnterLogoHide)b).priority=((LoginAct_EnterLogoHide)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_EnterLogoShow_PropertyWrap(){
			Type t = typeof(LoginAct_EnterLogoShow);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((LoginAct_EnterLogoShow)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_EnterLogoShow) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_EnterLogoShow)b).priority=((LoginAct_EnterLogoShow)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginAct_EnterLogoShow)a).panel = (string) b;};
			_info.getter = a =>((LoginAct_EnterLogoShow) a).panel;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((LoginAct_EnterLogoShow)b).panel=((LoginAct_EnterLogoShow)a).panel;};
			list[1] = new EditableProperty("panel",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginAct_EnterLogoShow)a).duration = (float) b;};
			_info.getter = a =>((LoginAct_EnterLogoShow) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((LoginAct_EnterLogoShow)b).duration=((LoginAct_EnterLogoShow)a).duration;};
			list[2] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_PreloadHide_PropertyWrap(){
			Type t = typeof(LoginAct_PreloadHide);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((LoginAct_PreloadHide)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_PreloadHide) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_PreloadHide)b).priority=((LoginAct_PreloadHide)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_PreloadShow_PropertyWrap(){
			Type t = typeof(LoginAct_PreloadShow);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((LoginAct_PreloadShow)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_PreloadShow) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_PreloadShow)b).priority=((LoginAct_PreloadShow)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginAct_PreloadShow)a).panel = (string) b;};
			_info.getter = a =>((LoginAct_PreloadShow) a).panel;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((LoginAct_PreloadShow)b).panel=((LoginAct_PreloadShow)a).panel;};
			list[1] = new EditableProperty("panel",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_GetConfig_PropertyWrap(){
			Type t = typeof(LoginAct_GetConfig);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((LoginAct_GetConfig)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_GetConfig) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_GetConfig)b).priority=((LoginAct_GetConfig)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_InitDiagram_PropertyWrap(){
			Type t = typeof(LoginAct_InitDiagram);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((LoginAct_InitDiagram)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_InitDiagram) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_InitDiagram)b).priority=((LoginAct_InitDiagram)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_InitMachine_PropertyWrap(){
			Type t = typeof(LoginAct_InitMachine);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((LoginAct_InitMachine)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_InitMachine) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_InitMachine)b).priority=((LoginAct_InitMachine)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_InitMainUI_PropertyWrap(){
			Type t = typeof(LoginAct_InitMainUI);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((LoginAct_InitMainUI)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_InitMainUI) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_InitMainUI)b).priority=((LoginAct_InitMainUI)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_InitMediator_PropertyWrap(){
			Type t = typeof(LoginAct_InitMediator);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((LoginAct_InitMediator)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_InitMediator) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_InitMediator)b).priority=((LoginAct_InitMediator)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginAct_InitMediator)a).file = (string) b;};
			_info.getter = a =>((LoginAct_InitMediator) a).file;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((LoginAct_InitMediator)b).file=((LoginAct_InitMediator)a).file;};
			list[1] = new EditableProperty("file",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_InitScreen_PropertyWrap(){
			Type t = typeof(LoginAct_InitScreen);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((LoginAct_InitScreen)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_InitScreen) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_InitScreen)b).priority=((LoginAct_InitScreen)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_InitShader_PropertyWrap(){
			Type t = typeof(LoginAct_InitShader);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((LoginAct_InitShader)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_InitShader) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_InitShader)b).priority=((LoginAct_InitShader)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_InitStyle_PropertyWrap(){
			Type t = typeof(LoginAct_InitStyle);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((LoginAct_InitStyle)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_InitStyle) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_InitStyle)b).priority=((LoginAct_InitStyle)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginAct_InitStyle)a).file = (string) b;};
			_info.getter = a =>((LoginAct_InitStyle) a).file;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((LoginAct_InitStyle)b).file=((LoginAct_InitStyle)a).file;};
			list[1] = new EditableProperty("file",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_InitTree_PropertyWrap(){
			Type t = typeof(LoginAct_InitTree);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((LoginAct_InitTree)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_InitTree) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_InitTree)b).priority=((LoginAct_InitTree)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_ReadLocalAssetManager_PropertyWrap(){
			Type t = typeof(LoginAct_ReadLocalAssetManager);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((LoginAct_ReadLocalAssetManager)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_ReadLocalAssetManager) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_ReadLocalAssetManager)b).priority=((LoginAct_ReadLocalAssetManager)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_InitData_PropertyWrap(){
			Type t = typeof(LoginAct_InitData);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((LoginAct_InitData)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_InitData) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_InitData)b).priority=((LoginAct_InitData)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_InitLua_PropertyWrap(){
			Type t = typeof(LoginAct_InitLua);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((LoginAct_InitLua)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_InitLua) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_InitLua)b).priority=((LoginAct_InitLua)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_InitLang_PropertyWrap(){
			Type t = typeof(LoginAct_InitLang);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((LoginAct_InitLang)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_InitLang) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_InitLang)b).priority=((LoginAct_InitLang)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginAct_InitLang)a).lua = (string) b;};
			_info.getter = a =>((LoginAct_InitLang) a).lua;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((LoginAct_InitLang)b).lua=((LoginAct_InitLang)a).lua;};
			list[1] = new EditableProperty("lua",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_LoadVersion_PropertyWrap(){
			Type t = typeof(LoginAct_LoadVersion);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((LoginAct_LoadVersion)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_LoadVersion) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_LoadVersion)b).priority=((LoginAct_LoadVersion)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginAct_LoadVersion)a).url = (string) b;};
			_info.getter = a =>((LoginAct_LoadVersion) a).url;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((LoginAct_LoadVersion)b).url=((LoginAct_LoadVersion)a).url;};
			list[1] = new EditableProperty("url",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginAct_SdkLogin_PropertyWrap(){
			Type t = typeof(LoginAct_SdkLogin);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((LoginAct_SdkLogin)a).priority = (int) b;};
			_info.getter = a =>((LoginAct_SdkLogin) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginAct_SdkLogin)b).priority=((LoginAct_SdkLogin)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginCon_IsLowCritical_PropertyWrap(){
			Type t = typeof(LoginCon_IsLowCritical);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((LoginCon_IsLowCritical)a).score = (int) b;};
			_info.getter = a =>((LoginCon_IsLowCritical) a).score;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginCon_IsLowCritical)b).score=((LoginCon_IsLowCritical)a).score;};
			list[0] = new EditableProperty("score",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginCon_IsLowCritical)a).compare = (bool) b;};
			_info.getter = a =>((LoginCon_IsLowCritical) a).compare;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((LoginCon_IsLowCritical)b).compare=((LoginCon_IsLowCritical)a).compare;};
			list[1] = new EditableProperty("compare",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginCon_IsNewPlayer_PropertyWrap(){
			Type t = typeof(LoginCon_IsNewPlayer);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((LoginCon_IsNewPlayer)a).score = (int) b;};
			_info.getter = a =>((LoginCon_IsNewPlayer) a).score;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginCon_IsNewPlayer)b).score=((LoginCon_IsNewPlayer)a).score;};
			list[0] = new EditableProperty("score",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginCon_IsNewPlayer)a).compare = (bool) b;};
			_info.getter = a =>((LoginCon_IsNewPlayer) a).compare;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((LoginCon_IsNewPlayer)b).compare=((LoginCon_IsNewPlayer)a).compare;};
			list[1] = new EditableProperty("compare",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginCon_IsStreamHigh_PropertyWrap(){
			Type t = typeof(LoginCon_IsStreamHigh);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((LoginCon_IsStreamHigh)a).score = (int) b;};
			_info.getter = a =>((LoginCon_IsStreamHigh) a).score;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginCon_IsStreamHigh)b).score=((LoginCon_IsStreamHigh)a).score;};
			list[0] = new EditableProperty("score",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginCon_IsStreamHigh)a).compare = (bool) b;};
			_info.getter = a =>((LoginCon_IsStreamHigh) a).compare;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((LoginCon_IsStreamHigh)b).compare=((LoginCon_IsStreamHigh)a).compare;};
			list[1] = new EditableProperty("compare",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void LoginCon_IsVersionUpdate_PropertyWrap(){
			Type t = typeof(LoginCon_IsVersionUpdate);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((LoginCon_IsVersionUpdate)a).score = (int) b;};
			_info.getter = a =>((LoginCon_IsVersionUpdate) a).score;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((LoginCon_IsVersionUpdate)b).score=((LoginCon_IsVersionUpdate)a).score;};
			list[0] = new EditableProperty("score",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((LoginCon_IsVersionUpdate)a).compare = (bool) b;};
			_info.getter = a =>((LoginCon_IsVersionUpdate) a).compare;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((LoginCon_IsVersionUpdate)b).compare=((LoginCon_IsVersionUpdate)a).compare;};
			list[1] = new EditableProperty("compare",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_BuildPlace_PropertyWrap(){
			Type t = typeof(SceneAct_BuildPlace);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((SceneAct_BuildPlace)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_BuildPlace) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_BuildPlace)b).priority=((SceneAct_BuildPlace)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_ClearData_PropertyWrap(){
			Type t = typeof(SceneAct_ClearData);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((SceneAct_ClearData)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_ClearData) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_ClearData)b).priority=((SceneAct_ClearData)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_ClearEntity_PropertyWrap(){
			Type t = typeof(SceneAct_ClearEntity);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((SceneAct_ClearEntity)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_ClearEntity) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_ClearEntity)b).priority=((SceneAct_ClearEntity)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_ClearFinal_PropertyWrap(){
			Type t = typeof(SceneAct_ClearFinal);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((SceneAct_ClearFinal)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_ClearFinal) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_ClearFinal)b).priority=((SceneAct_ClearFinal)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_ClearMemory_PropertyWrap(){
			Type t = typeof(SceneAct_ClearMemory);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((SceneAct_ClearMemory)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_ClearMemory) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_ClearMemory)b).priority=((SceneAct_ClearMemory)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_DestroyPrev_PropertyWrap(){
			Type t = typeof(SceneAct_DestroyPrev);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((SceneAct_DestroyPrev)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_DestroyPrev) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_DestroyPrev)b).priority=((SceneAct_DestroyPrev)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_LoadComplete_PropertyWrap(){
			Type t = typeof(SceneAct_LoadComplete);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((SceneAct_LoadComplete)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_LoadComplete) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_LoadComplete)b).priority=((SceneAct_LoadComplete)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_LoadPlace_PropertyWrap(){
			Type t = typeof(SceneAct_LoadPlace);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((SceneAct_LoadPlace)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_LoadPlace) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_LoadPlace)b).priority=((SceneAct_LoadPlace)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_LoadScene_PropertyWrap(){
			Type t = typeof(SceneAct_LoadScene);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((SceneAct_LoadScene)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_LoadScene) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_LoadScene)b).priority=((SceneAct_LoadScene)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_OpenPanel_PropertyWrap(){
			Type t = typeof(SceneAct_OpenPanel);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((SceneAct_OpenPanel)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_OpenPanel) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_OpenPanel)b).priority=((SceneAct_OpenPanel)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_ClosePanel_PropertyWrap(){
			Type t = typeof(SceneAct_ClosePanel);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((SceneAct_ClosePanel)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_ClosePanel) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_ClosePanel)b).priority=((SceneAct_ClosePanel)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_ParseGeometry_PropertyWrap(){
			Type t = typeof(SceneAct_ParseGeometry);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((SceneAct_ParseGeometry)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_ParseGeometry) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_ParseGeometry)b).priority=((SceneAct_ParseGeometry)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_TransitionHide_PropertyWrap(){
			Type t = typeof(SceneAct_TransitionHide);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((SceneAct_TransitionHide)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_TransitionHide) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_TransitionHide)b).priority=((SceneAct_TransitionHide)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void SceneAct_TransitionShow_PropertyWrap(){
			Type t = typeof(SceneAct_TransitionShow);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((SceneAct_TransitionShow)a).priority = (int) b;};
			_info.getter = a =>((SceneAct_TransitionShow) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((SceneAct_TransitionShow)b).priority=((SceneAct_TransitionShow)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((SceneAct_TransitionShow)a).url = (string) b;};
			_info.getter = a =>((SceneAct_TransitionShow) a).url;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((SceneAct_TransitionShow)b).url=((SceneAct_TransitionShow)a).url;};
			list[1] = new EditableProperty("url",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((SceneAct_TransitionShow)a).luaFile = (string) b;};
			_info.getter = a =>((SceneAct_TransitionShow) a).luaFile;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((SceneAct_TransitionShow)b).luaFile=((SceneAct_TransitionShow)a).luaFile;};
			list[2] = new EditableProperty("luaFile",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AIAct_FightStatus_PropertyWrap(){
			Type t = typeof(AIAct_FightStatus);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((AIAct_FightStatus)a).priority = (int) b;};
			_info.getter = a =>((AIAct_FightStatus) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AIAct_FightStatus)b).priority=((AIAct_FightStatus)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AIAct_InitCameraFollow_PropertyWrap(){
			Type t = typeof(AIAct_InitCameraFollow);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((AIAct_InitCameraFollow)a).priority = (int) b;};
			_info.getter = a =>((AIAct_InitCameraFollow) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AIAct_InitCameraFollow)b).priority=((AIAct_InitCameraFollow)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AIAct_InitChildRenderer_PropertyWrap(){
			Type t = typeof(AIAct_InitChildRenderer);
			EditableProperty[] list = new EditableProperty[5];
			_info.setter=(a,b)=>{((AIAct_InitChildRenderer)a).priority = (int) b;};
			_info.getter = a =>((AIAct_InitChildRenderer) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AIAct_InitChildRenderer)b).priority=((AIAct_InitChildRenderer)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AIAct_InitChildRenderer)a).property = (string) b;};
			_info.getter = a =>((AIAct_InitChildRenderer) a).property;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((AIAct_InitChildRenderer)b).property=((AIAct_InitChildRenderer)a).property;};
			list[1] = new EditableProperty("property",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AIAct_InitChildRenderer)a).requireBone = (string) b;};
			_info.getter = a =>((AIAct_InitChildRenderer) a).requireBone;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((AIAct_InitChildRenderer)b).requireBone=((AIAct_InitChildRenderer)a).requireBone;};
			list[2] = new EditableProperty("requireBone",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AIAct_InitChildRenderer)a).boneMode = (BoneBundleMode) b;};
			_info.getter = a =>((AIAct_InitChildRenderer) a).boneMode;
			_info.propertyType = typeof(BoneBundleMode);
			_info.copier=(a,b)=>{((AIAct_InitChildRenderer)b).boneMode=((AIAct_InitChildRenderer)a).boneMode;};
			list[3] = new EditableProperty("boneMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AIAct_InitChildRenderer)a).support = (string[]) b;};
			_info.getter = a =>((AIAct_InitChildRenderer) a).support;
			_info.propertyType = typeof(string[]);
			_info.copier=(a,b)=>{((AIAct_InitChildRenderer)b).support=((AIAct_InitChildRenderer)a).support;};
			list[4] = new EditableProperty("support",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AIAct_InitLabel_PropertyWrap(){
			Type t = typeof(AIAct_InitLabel);
			EditableProperty[] list = new EditableProperty[4];
			_info.setter=(a,b)=>{((AIAct_InitLabel)a).priority = (int) b;};
			_info.getter = a =>((AIAct_InitLabel) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AIAct_InitLabel)b).priority=((AIAct_InitLabel)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AIAct_InitLabel)a).prefab = (string) b;};
			_info.getter = a =>((AIAct_InitLabel) a).prefab;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((AIAct_InitLabel)b).prefab=((AIAct_InitLabel)a).prefab;};
			list[1] = new EditableProperty("prefab",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AIAct_InitLabel)a).lua = (string) b;};
			_info.getter = a =>((AIAct_InitLabel) a).lua;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((AIAct_InitLabel)b).lua=((AIAct_InitLabel)a).lua;};
			list[2] = new EditableProperty("lua",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AIAct_InitLabel)a).property = (string[]) b;};
			_info.getter = a =>((AIAct_InitLabel) a).property;
			_info.propertyType = typeof(string[]);
			_info.copier=(a,b)=>{((AIAct_InitLabel)b).property=((AIAct_InitLabel)a).property;};
			list[3] = new EditableProperty("property",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AIAct_InitRenderer_PropertyWrap(){
			Type t = typeof(AIAct_InitRenderer);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((AIAct_InitRenderer)a).priority = (int) b;};
			_info.getter = a =>((AIAct_InitRenderer) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AIAct_InitRenderer)b).priority=((AIAct_InitRenderer)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AIAct_InitRenderer)a).property = (string) b;};
			_info.getter = a =>((AIAct_InitRenderer) a).property;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((AIAct_InitRenderer)b).property=((AIAct_InitRenderer)a).property;};
			list[1] = new EditableProperty("property",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AIAct_InitRenderer)a).type = (RendererType) b;};
			_info.getter = a =>((AIAct_InitRenderer) a).type;
			_info.propertyType = typeof(RendererType);
			_info.copier=(a,b)=>{((AIAct_InitRenderer)b).type=((AIAct_InitRenderer)a).type;};
			list[2] = new EditableProperty("type",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AIAct_Jump_PropertyWrap(){
			Type t = typeof(AIAct_Jump);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((AIAct_Jump)a).priority = (int) b;};
			_info.getter = a =>((AIAct_Jump) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AIAct_Jump)b).priority=((AIAct_Jump)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AIAct_ParameterSet_PropertyWrap(){
			Type t = typeof(AIAct_ParameterSet);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((AIAct_ParameterSet)a).priority = (int) b;};
			_info.getter = a =>((AIAct_ParameterSet) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AIAct_ParameterSet)b).priority=((AIAct_ParameterSet)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AIAct_ParameterSet)a).paramId = (long) b;};
			_info.getter = a =>((AIAct_ParameterSet) a).paramId;
			_info.propertyType = typeof(long);
			_info.copier=(a,b)=>{((AIAct_ParameterSet)b).paramId=((AIAct_ParameterSet)a).paramId;};
			list[1] = new EditableProperty("paramId",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AIAct_ParameterSet)a).targetValue = (float) b;};
			_info.getter = a =>((AIAct_ParameterSet) a).targetValue;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AIAct_ParameterSet)b).targetValue=((AIAct_ParameterSet)a).targetValue;};
			list[2] = new EditableProperty("targetValue",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AIAct_PathFinder_PropertyWrap(){
			Type t = typeof(AIAct_PathFinder);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((AIAct_PathFinder)a).priority = (int) b;};
			_info.getter = a =>((AIAct_PathFinder) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AIAct_PathFinder)b).priority=((AIAct_PathFinder)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AIAct_PathSourcePickup_PropertyWrap(){
			Type t = typeof(AIAct_PathSourcePickup);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((AIAct_PathSourcePickup)a).priority = (int) b;};
			_info.getter = a =>((AIAct_PathSourcePickup) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AIAct_PathSourcePickup)b).priority=((AIAct_PathSourcePickup)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AIAct_SetAnimatorBool_PropertyWrap(){
			Type t = typeof(AIAct_SetAnimatorBool);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((AIAct_SetAnimatorBool)a).priority = (int) b;};
			_info.getter = a =>((AIAct_SetAnimatorBool) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AIAct_SetAnimatorBool)b).priority=((AIAct_SetAnimatorBool)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AIAct_SetAnimatorBool)a).animKey = (string) b;};
			_info.getter = a =>((AIAct_SetAnimatorBool) a).animKey;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((AIAct_SetAnimatorBool)b).animKey=((AIAct_SetAnimatorBool)a).animKey;};
			list[1] = new EditableProperty("animKey",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AIAct_SetAnimatorBool)a).threshhold = (bool) b;};
			_info.getter = a =>((AIAct_SetAnimatorBool) a).threshhold;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((AIAct_SetAnimatorBool)b).threshhold=((AIAct_SetAnimatorBool)a).threshhold;};
			list[2] = new EditableProperty("threshhold",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AICon_HasJumpPoint_PropertyWrap(){
			Type t = typeof(AICon_HasJumpPoint);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((AICon_HasJumpPoint)a).score = (int) b;};
			_info.getter = a =>((AICon_HasJumpPoint) a).score;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AICon_HasJumpPoint)b).score=((AICon_HasJumpPoint)a).score;};
			list[0] = new EditableProperty("score",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AICon_RuntimeParameter_PropertyWrap(){
			Type t = typeof(AICon_RuntimeParameter);
			EditableProperty[] list = new EditableProperty[6];
			_info.setter=(a,b)=>{((AICon_RuntimeParameter)a).score = (int) b;};
			_info.getter = a =>((AICon_RuntimeParameter) a).score;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AICon_RuntimeParameter)b).score=((AICon_RuntimeParameter)a).score;};
			list[0] = new EditableProperty("score",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICon_RuntimeParameter)a).paramType = (int) b;};
			_info.getter = a =>((AICon_RuntimeParameter) a).paramType;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AICon_RuntimeParameter)b).paramType=((AICon_RuntimeParameter)a).paramType;};
			list[1] = new EditableProperty("paramType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICon_RuntimeParameter)a).compareMode = (ValueCompareType) b;};
			_info.getter = a =>((AICon_RuntimeParameter) a).compareMode;
			_info.propertyType = typeof(ValueCompareType);
			_info.copier=(a,b)=>{((AICon_RuntimeParameter)b).compareMode=((AICon_RuntimeParameter)a).compareMode;};
			list[2] = new EditableProperty("compareMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICon_RuntimeParameter)a).valueType = (ValueMethod) b;};
			_info.getter = a =>((AICon_RuntimeParameter) a).valueType;
			_info.propertyType = typeof(ValueMethod);
			_info.copier=(a,b)=>{((AICon_RuntimeParameter)b).valueType=((AICon_RuntimeParameter)a).valueType;};
			list[3] = new EditableProperty("valueType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICon_RuntimeParameter)a).denominatorType = (int) b;};
			_info.getter = a =>((AICon_RuntimeParameter) a).denominatorType;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AICon_RuntimeParameter)b).denominatorType=((AICon_RuntimeParameter)a).denominatorType;};
			list[4] = new EditableProperty("denominatorType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICon_RuntimeParameter)a).targetValue = (float) b;};
			_info.getter = a =>((AICon_RuntimeParameter) a).targetValue;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICon_RuntimeParameter)b).targetValue=((AICon_RuntimeParameter)a).targetValue;};
			list[5] = new EditableProperty("targetValue",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void HostAct_Dead_PropertyWrap(){
			Type t = typeof(HostAct_Dead);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((HostAct_Dead)a).priority = (int) b;};
			_info.getter = a =>((HostAct_Dead) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((HostAct_Dead)b).priority=((HostAct_Dead)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void HostAct_FireSkill_PropertyWrap(){
			Type t = typeof(HostAct_FireSkill);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((HostAct_FireSkill)a).priority = (int) b;};
			_info.getter = a =>((HostAct_FireSkill) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((HostAct_FireSkill)b).priority=((HostAct_FireSkill)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void HostAct_Gather_PropertyWrap(){
			Type t = typeof(HostAct_Gather);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((HostAct_Gather)a).priority = (int) b;};
			_info.getter = a =>((HostAct_Gather) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((HostAct_Gather)b).priority=((HostAct_Gather)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void HostAct_PathMove_PropertyWrap(){
			Type t = typeof(HostAct_PathMove);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((HostAct_PathMove)a).priority = (int) b;};
			_info.getter = a =>((HostAct_PathMove) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((HostAct_PathMove)b).priority=((HostAct_PathMove)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((HostAct_PathMove)a).notifyCommand = (int) b;};
			_info.getter = a =>((HostAct_PathMove) a).notifyCommand;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((HostAct_PathMove)b).notifyCommand=((HostAct_PathMove)a).notifyCommand;};
			list[1] = new EditableProperty("notifyCommand",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((HostAct_PathMove)a).jumpIdleTime = (float) b;};
			_info.getter = a =>((HostAct_PathMove) a).jumpIdleTime;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((HostAct_PathMove)b).jumpIdleTime=((HostAct_PathMove)a).jumpIdleTime;};
			list[2] = new EditableProperty("jumpIdleTime",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void HostAct_PushListener_PropertyWrap(){
			Type t = typeof(HostAct_PushListener);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((HostAct_PushListener)a).priority = (int) b;};
			_info.getter = a =>((HostAct_PushListener) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((HostAct_PushListener)b).priority=((HostAct_PushListener)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void HostAct_PushMove_PropertyWrap(){
			Type t = typeof(HostAct_PushMove);
			EditableProperty[] list = new EditableProperty[4];
			_info.setter=(a,b)=>{((HostAct_PushMove)a).priority = (int) b;};
			_info.getter = a =>((HostAct_PushMove) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((HostAct_PushMove)b).priority=((HostAct_PushMove)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((HostAct_PushMove)a).notifier = (string) b;};
			_info.getter = a =>((HostAct_PushMove) a).notifier;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((HostAct_PushMove)b).notifier=((HostAct_PushMove)a).notifier;};
			list[1] = new EditableProperty("notifier",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((HostAct_PushMove)a).notifyInterval = (int) b;};
			_info.getter = a =>((HostAct_PushMove) a).notifyInterval;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((HostAct_PushMove)b).notifyInterval=((HostAct_PushMove)a).notifyInterval;};
			list[2] = new EditableProperty("notifyInterval",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((HostAct_PushMove)a).forcast = (int) b;};
			_info.getter = a =>((HostAct_PushMove) a).forcast;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((HostAct_PushMove)b).forcast=((HostAct_PushMove)a).forcast;};
			list[3] = new EditableProperty("forcast",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void HostAct_Stand_PropertyWrap(){
			Type t = typeof(HostAct_Stand);
			EditableProperty[] list = new EditableProperty[4];
			_info.setter=(a,b)=>{((HostAct_Stand)a).priority = (int) b;};
			_info.getter = a =>((HostAct_Stand) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((HostAct_Stand)b).priority=((HostAct_Stand)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((HostAct_Stand)a).notifyCommand = (string) b;};
			_info.getter = a =>((HostAct_Stand) a).notifyCommand;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((HostAct_Stand)b).notifyCommand=((HostAct_Stand)a).notifyCommand;};
			list[1] = new EditableProperty("notifyCommand",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((HostAct_Stand)a).updateInterval = (float) b;};
			_info.getter = a =>((HostAct_Stand) a).updateInterval;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((HostAct_Stand)b).updateInterval=((HostAct_Stand)a).updateInterval;};
			list[2] = new EditableProperty("updateInterval",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((HostAct_Stand)a).standModePercent = (float) b;};
			_info.getter = a =>((HostAct_Stand) a).standModePercent;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((HostAct_Stand)b).standModePercent=((HostAct_Stand)a).standModePercent;};
			list[3] = new EditableProperty("standModePercent",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void HostCon_OnEntityClick_PropertyWrap(){
			Type t = typeof(HostCon_OnEntityClick);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((HostCon_OnEntityClick)a).score = (int) b;};
			_info.getter = a =>((HostCon_OnEntityClick) a).score;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((HostCon_OnEntityClick)b).score=((HostCon_OnEntityClick)a).score;};
			list[0] = new EditableProperty("score",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void HostCon_OnGroudClick_PropertyWrap(){
			Type t = typeof(HostCon_OnGroudClick);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((HostCon_OnGroudClick)a).score = (int) b;};
			_info.getter = a =>((HostCon_OnGroudClick) a).score;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((HostCon_OnGroudClick)b).score=((HostCon_OnGroudClick)a).score;};
			list[0] = new EditableProperty("score",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void CpxParameter_PropertyWrap(){
			Type t = typeof(CpxParameter);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((CpxParameter)a).name = (string) b;};
			_info.getter = a =>((CpxParameter) a).name;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((CpxParameter)b).name=((CpxParameter)a).name;};
			list[0] = new EditableProperty("name",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxParameter)a).type = (CpxParameter.ParameterType) b;};
			_info.getter = a =>((CpxParameter) a).type;
			_info.propertyType = typeof(CpxParameter.ParameterType);
			_info.copier=(a,b)=>{((CpxParameter)b).type=((CpxParameter)a).type;};
			list[1] = new EditableProperty("type",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxParameter)a).defautValue = (float) b;};
			_info.getter = a =>((CpxParameter) a).defautValue;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((CpxParameter)b).defautValue=((CpxParameter)a).defautValue;};
			list[2] = new EditableProperty("defautValue",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void CpxState_Action_PropertyWrap(){
			Type t = typeof(CpxState_Action);
			EditableProperty[] list = new EditableProperty[6];
			_info.setter=(a,b)=>{((CpxState_Action)a).stateName = (string) b;};
			_info.getter = a =>((CpxState_Action) a).stateName;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((CpxState_Action)b).stateName=((CpxState_Action)a).stateName;};
			list[0] = new EditableProperty("stateName",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxState_Action)a).isDefault = (bool) b;};
			_info.getter = a =>((CpxState_Action) a).isDefault;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((CpxState_Action)b).isDefault=((CpxState_Action)a).isDefault;};
			list[1] = new EditableProperty("isDefault",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxState_Action)a).priority = (int) b;};
			_info.getter = a =>((CpxState_Action) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((CpxState_Action)b).priority=((CpxState_Action)a).priority;};
			list[2] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxState_Action)a).useStatePriority = (bool) b;};
			_info.getter = a =>((CpxState_Action) a).useStatePriority;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((CpxState_Action)b).useStatePriority=((CpxState_Action)a).useStatePriority;};
			list[3] = new EditableProperty("useStatePriority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxState_Action)a).order = (CpxState_Action.Order) b;};
			_info.getter = a =>((CpxState_Action) a).order;
			_info.propertyType = typeof(CpxState_Action.Order);
			_info.copier=(a,b)=>{((CpxState_Action)b).order=((CpxState_Action)a).order;};
			list[4] = new EditableProperty("order",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxState_Action)a).loops = (int) b;};
			_info.getter = a =>((CpxState_Action) a).loops;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((CpxState_Action)b).loops=((CpxState_Action)a).loops;};
			list[5] = new EditableProperty("loops",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void CpxState_Any_PropertyWrap(){
			Type t = typeof(CpxState_Any);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((CpxState_Any)a).stateName = (string) b;};
			_info.getter = a =>((CpxState_Any) a).stateName;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((CpxState_Any)b).stateName=((CpxState_Any)a).stateName;};
			list[0] = new EditableProperty("stateName",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxState_Any)a).isDefault = (bool) b;};
			_info.getter = a =>((CpxState_Any) a).isDefault;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((CpxState_Any)b).isDefault=((CpxState_Any)a).isDefault;};
			list[1] = new EditableProperty("isDefault",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxState_Any)a).priority = (int) b;};
			_info.getter = a =>((CpxState_Any) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((CpxState_Any)b).priority=((CpxState_Any)a).priority;};
			list[2] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void CpxState_Exit_PropertyWrap(){
			Type t = typeof(CpxState_Exit);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((CpxState_Exit)a).stateName = (string) b;};
			_info.getter = a =>((CpxState_Exit) a).stateName;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((CpxState_Exit)b).stateName=((CpxState_Exit)a).stateName;};
			list[0] = new EditableProperty("stateName",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxState_Exit)a).isDefault = (bool) b;};
			_info.getter = a =>((CpxState_Exit) a).isDefault;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((CpxState_Exit)b).isDefault=((CpxState_Exit)a).isDefault;};
			list[1] = new EditableProperty("isDefault",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxState_Exit)a).priority = (int) b;};
			_info.getter = a =>((CpxState_Exit) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((CpxState_Exit)b).priority=((CpxState_Exit)a).priority;};
			list[2] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void CpxState_Machine_PropertyWrap(){
			Type t = typeof(CpxState_Machine);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((CpxState_Machine)a).stateName = (string) b;};
			_info.getter = a =>((CpxState_Machine) a).stateName;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((CpxState_Machine)b).stateName=((CpxState_Machine)a).stateName;};
			list[0] = new EditableProperty("stateName",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxState_Machine)a).isDefault = (bool) b;};
			_info.getter = a =>((CpxState_Machine) a).isDefault;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((CpxState_Machine)b).isDefault=((CpxState_Machine)a).isDefault;};
			list[1] = new EditableProperty("isDefault",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxState_Machine)a).priority = (int) b;};
			_info.getter = a =>((CpxState_Machine) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((CpxState_Machine)b).priority=((CpxState_Machine)a).priority;};
			list[2] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void CpxTransition_PropertyWrap(){
			Type t = typeof(CpxTransition);
			EditableProperty[] list = new EditableProperty[5];
			_info.setter=(a,b)=>{((CpxTransition)a).selectMode = (CpxTransition.SelectMode) b;};
			_info.getter = a =>((CpxTransition) a).selectMode;
			_info.propertyType = typeof(CpxTransition.SelectMode);
			_info.copier=(a,b)=>{((CpxTransition)b).selectMode=((CpxTransition)a).selectMode;};
			list[0] = new EditableProperty("selectMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxTransition)a).useDefaultParameter = (bool) b;};
			_info.getter = a =>((CpxTransition) a).useDefaultParameter;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((CpxTransition)b).useDefaultParameter=((CpxTransition)a).useDefaultParameter;};
			list[1] = new EditableProperty("useDefaultParameter",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxTransition)a).canTransferToSelf = (bool) b;};
			_info.getter = a =>((CpxTransition) a).canTransferToSelf;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((CpxTransition)b).canTransferToSelf=((CpxTransition)a).canTransferToSelf;};
			list[2] = new EditableProperty("canTransferToSelf",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxTransition)a).interrupt = (CpxTransition.InterruptMode) b;};
			_info.getter = a =>((CpxTransition) a).interrupt;
			_info.propertyType = typeof(CpxTransition.InterruptMode);
			_info.copier=(a,b)=>{((CpxTransition)b).interrupt=((CpxTransition)a).interrupt;};
			list[3] = new EditableProperty("interrupt",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxTransition)a).checkMode = (CpxTransition.CheckMode) b;};
			_info.getter = a =>((CpxTransition) a).checkMode;
			_info.propertyType = typeof(CpxTransition.CheckMode);
			_info.copier=(a,b)=>{((CpxTransition)b).checkMode=((CpxTransition)a).checkMode;};
			list[4] = new EditableProperty("checkMode",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void CpxAct_Lua_PropertyWrap(){
			Type t = typeof(CpxAct_Lua);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((CpxAct_Lua)a).priority = (int) b;};
			_info.getter = a =>((CpxAct_Lua) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((CpxAct_Lua)b).priority=((CpxAct_Lua)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxAct_Lua)a).lua = (string) b;};
			_info.getter = a =>((CpxAct_Lua) a).lua;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((CpxAct_Lua)b).lua=((CpxAct_Lua)a).lua;};
			list[1] = new EditableProperty("lua",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void CpxAct_Nothing_PropertyWrap(){
			Type t = typeof(CpxAct_Nothing);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((CpxAct_Nothing)a).priority = (int) b;};
			_info.getter = a =>((CpxAct_Nothing) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((CpxAct_Nothing)b).priority=((CpxAct_Nothing)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void CpxAct_SetInited_PropertyWrap(){
			Type t = typeof(CpxAct_SetInited);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((CpxAct_SetInited)a).priority = (int) b;};
			_info.getter = a =>((CpxAct_SetInited) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((CpxAct_SetInited)b).priority=((CpxAct_SetInited)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxAct_SetInited)a).value = (bool) b;};
			_info.getter = a =>((CpxAct_SetInited) a).value;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((CpxAct_SetInited)b).value=((CpxAct_SetInited)a).value;};
			list[1] = new EditableProperty("value",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void CpxCondition_Any_PropertyWrap(){
			Type t = typeof(CpxCondition_Any);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((CpxCondition_Any)a).score = (int) b;};
			_info.getter = a =>((CpxCondition_Any) a).score;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((CpxCondition_Any)b).score=((CpxCondition_Any)a).score;};
			list[0] = new EditableProperty("score",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void CpxCondition_IsCpxInited_PropertyWrap(){
			Type t = typeof(CpxCondition_IsCpxInited);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((CpxCondition_IsCpxInited)a).score = (int) b;};
			_info.getter = a =>((CpxCondition_IsCpxInited) a).score;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((CpxCondition_IsCpxInited)b).score=((CpxCondition_IsCpxInited)a).score;};
			list[0] = new EditableProperty("score",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxCondition_IsCpxInited)a).compare = (bool) b;};
			_info.getter = a =>((CpxCondition_IsCpxInited) a).compare;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((CpxCondition_IsCpxInited)b).compare=((CpxCondition_IsCpxInited)a).compare;};
			list[1] = new EditableProperty("compare",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void CpxCondition_Lua_PropertyWrap(){
			Type t = typeof(CpxCondition_Lua);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((CpxCondition_Lua)a).score = (int) b;};
			_info.getter = a =>((CpxCondition_Lua) a).score;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((CpxCondition_Lua)b).score=((CpxCondition_Lua)a).score;};
			list[0] = new EditableProperty("score",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void CpxCondition_Parameter_PropertyWrap(){
			Type t = typeof(CpxCondition_Parameter);
			EditableProperty[] list = new EditableProperty[4];
			_info.setter=(a,b)=>{((CpxCondition_Parameter)a).score = (int) b;};
			_info.getter = a =>((CpxCondition_Parameter) a).score;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((CpxCondition_Parameter)b).score=((CpxCondition_Parameter)a).score;};
			list[0] = new EditableProperty("score",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxCondition_Parameter)a).paramId = (long) b;};
			_info.getter = a =>((CpxCondition_Parameter) a).paramId;
			_info.propertyType = typeof(long);
			_info.copier=(a,b)=>{((CpxCondition_Parameter)b).paramId=((CpxCondition_Parameter)a).paramId;};
			list[1] = new EditableProperty("paramId",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxCondition_Parameter)a).threshold = (float) b;};
			_info.getter = a =>((CpxCondition_Parameter) a).threshold;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((CpxCondition_Parameter)b).threshold=((CpxCondition_Parameter)a).threshold;};
			list[2] = new EditableProperty("threshold",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((CpxCondition_Parameter)a).mode = (CpxParameter.ConditionMode) b;};
			_info.getter = a =>((CpxCondition_Parameter) a).mode;
			_info.propertyType = typeof(CpxParameter.ConditionMode);
			_info.copier=(a,b)=>{((CpxCondition_Parameter)b).mode=((CpxCondition_Parameter)a).mode;};
			list[3] = new EditableProperty("mode",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void FireFx_Animation_PropertyWrap(){
			Type t = typeof(FireFx_Animation);
			EditableProperty[] list = new EditableProperty[14];
			_info.setter=(a,b)=>{((FireFx_Animation)a).groupPhase = (int) b;};
			_info.getter = a =>((FireFx_Animation) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((FireFx_Animation)b).groupPhase=((FireFx_Animation)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Animation)a).time = (float) b;};
			_info.getter = a =>((FireFx_Animation) a).time;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_Animation)b).time=((FireFx_Animation)a).time;};
			list[1] = new EditableProperty("time",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Animation)a).timeScaleType = (TimeScaleType) b;};
			_info.getter = a =>((FireFx_Animation) a).timeScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((FireFx_Animation)b).timeScaleType=((FireFx_Animation)a).timeScaleType;};
			list[2] = new EditableProperty("timeScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Animation)a).duration = (float) b;};
			_info.getter = a =>((FireFx_Animation) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_Animation)b).duration=((FireFx_Animation)a).duration;};
			list[3] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Animation)a).durationScaleType = (TimeScaleType) b;};
			_info.getter = a =>((FireFx_Animation) a).durationScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((FireFx_Animation)b).durationScaleType=((FireFx_Animation)a).durationScaleType;};
			list[4] = new EditableProperty("durationScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Animation)a).actionType = (AnimatorActionType) b;};
			_info.getter = a =>((FireFx_Animation) a).actionType;
			_info.propertyType = typeof(AnimatorActionType);
			_info.copier=(a,b)=>{((FireFx_Animation)b).actionType=((FireFx_Animation)a).actionType;};
			list[5] = new EditableProperty("actionType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Animation)a).anim = (string) b;};
			_info.getter = a =>((FireFx_Animation) a).anim;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((FireFx_Animation)b).anim=((FireFx_Animation)a).anim;};
			list[6] = new EditableProperty("anim",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Animation)a).paramName = (string) b;};
			_info.getter = a =>((FireFx_Animation) a).paramName;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((FireFx_Animation)b).paramName=((FireFx_Animation)a).paramName;};
			list[7] = new EditableProperty("paramName",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Animation)a).paramType = (AnimatorControllerParameterType) b;};
			_info.getter = a =>((FireFx_Animation) a).paramType;
			_info.propertyType = typeof(AnimatorControllerParameterType);
			_info.copier=(a,b)=>{((FireFx_Animation)b).paramType=((FireFx_Animation)a).paramType;};
			list[8] = new EditableProperty("paramType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Animation)a).paramValue = (float) b;};
			_info.getter = a =>((FireFx_Animation) a).paramValue;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_Animation)b).paramValue=((FireFx_Animation)a).paramValue;};
			list[9] = new EditableProperty("paramValue",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Animation)a).animTarget = (AnimatorTarget) b;};
			_info.getter = a =>((FireFx_Animation) a).animTarget;
			_info.propertyType = typeof(AnimatorTarget);
			_info.copier=(a,b)=>{((FireFx_Animation)b).animTarget=((FireFx_Animation)a).animTarget;};
			list[10] = new EditableProperty("animTarget",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Animation)a).bone = (string) b;};
			_info.getter = a =>((FireFx_Animation) a).bone;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((FireFx_Animation)b).bone=((FireFx_Animation)a).bone;};
			list[11] = new EditableProperty("bone",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Animation)a).autoBlock = (bool) b;};
			_info.getter = a =>((FireFx_Animation) a).autoBlock;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((FireFx_Animation)b).autoBlock=((FireFx_Animation)a).autoBlock;};
			list[12] = new EditableProperty("autoBlock",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Animation)a).animatorScaleType = (TimeScaleType) b;};
			_info.getter = a =>((FireFx_Animation) a).animatorScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((FireFx_Animation)b).animatorScaleType=((FireFx_Animation)a).animatorScaleType;};
			list[13] = new EditableProperty("animatorScaleType",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void FireFx_ChangeWeapon_PropertyWrap(){
			Type t = typeof(FireFx_ChangeWeapon);
			EditableProperty[] list = new EditableProperty[5];
			_info.setter=(a,b)=>{((FireFx_ChangeWeapon)a).groupPhase = (int) b;};
			_info.getter = a =>((FireFx_ChangeWeapon) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((FireFx_ChangeWeapon)b).groupPhase=((FireFx_ChangeWeapon)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_ChangeWeapon)a).time = (float) b;};
			_info.getter = a =>((FireFx_ChangeWeapon) a).time;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_ChangeWeapon)b).time=((FireFx_ChangeWeapon)a).time;};
			list[1] = new EditableProperty("time",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_ChangeWeapon)a).timeScaleType = (TimeScaleType) b;};
			_info.getter = a =>((FireFx_ChangeWeapon) a).timeScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((FireFx_ChangeWeapon)b).timeScaleType=((FireFx_ChangeWeapon)a).timeScaleType;};
			list[2] = new EditableProperty("timeScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_ChangeWeapon)a).bone = (string) b;};
			_info.getter = a =>((FireFx_ChangeWeapon) a).bone;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((FireFx_ChangeWeapon)b).bone=((FireFx_ChangeWeapon)a).bone;};
			list[3] = new EditableProperty("bone",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_ChangeWeapon)a).prefab = (string) b;};
			_info.getter = a =>((FireFx_ChangeWeapon) a).prefab;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((FireFx_ChangeWeapon)b).prefab=((FireFx_ChangeWeapon)a).prefab;};
			list[4] = new EditableProperty("prefab",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void FireFx_Hit_PropertyWrap(){
			Type t = typeof(FireFx_Hit);
			EditableProperty[] list = new EditableProperty[7];
			_info.setter=(a,b)=>{((FireFx_Hit)a).groupPhase = (int) b;};
			_info.getter = a =>((FireFx_Hit) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((FireFx_Hit)b).groupPhase=((FireFx_Hit)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Hit)a).time = (float) b;};
			_info.getter = a =>((FireFx_Hit) a).time;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_Hit)b).time=((FireFx_Hit)a).time;};
			list[1] = new EditableProperty("time",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Hit)a).timeScaleType = (TimeScaleType) b;};
			_info.getter = a =>((FireFx_Hit) a).timeScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((FireFx_Hit)b).timeScaleType=((FireFx_Hit)a).timeScaleType;};
			list[2] = new EditableProperty("timeScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Hit)a).asset = (string) b;};
			_info.getter = a =>((FireFx_Hit) a).asset;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((FireFx_Hit)b).asset=((FireFx_Hit)a).asset;};
			list[3] = new EditableProperty("asset",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Hit)a).angleOffset = (float) b;};
			_info.getter = a =>((FireFx_Hit) a).angleOffset;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_Hit)b).angleOffset=((FireFx_Hit)a).angleOffset;};
			list[4] = new EditableProperty("angleOffset",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Hit)a).offset = (Vector3) b;};
			_info.getter = a =>((FireFx_Hit) a).offset;
			_info.propertyType = typeof(Vector3);
			_info.copier=(a,b)=>{((FireFx_Hit)b).offset=((FireFx_Hit)a).offset;};
			list[5] = new EditableProperty("offset",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Hit)a).orient = (OrientMode) b;};
			_info.getter = a =>((FireFx_Hit) a).orient;
			_info.propertyType = typeof(OrientMode);
			_info.copier=(a,b)=>{((FireFx_Hit)b).orient=((FireFx_Hit)a).orient;};
			list[6] = new EditableProperty("orient",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void FireFx_Move_PropertyWrap(){
			Type t = typeof(FireFx_Move);
			EditableProperty[] list = new EditableProperty[6];
			_info.setter=(a,b)=>{((FireFx_Move)a).groupPhase = (int) b;};
			_info.getter = a =>((FireFx_Move) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((FireFx_Move)b).groupPhase=((FireFx_Move)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Move)a).time = (float) b;};
			_info.getter = a =>((FireFx_Move) a).time;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_Move)b).time=((FireFx_Move)a).time;};
			list[1] = new EditableProperty("time",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Move)a).timeScaleType = (TimeScaleType) b;};
			_info.getter = a =>((FireFx_Move) a).timeScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((FireFx_Move)b).timeScaleType=((FireFx_Move)a).timeScaleType;};
			list[2] = new EditableProperty("timeScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Move)a).duration = (float) b;};
			_info.getter = a =>((FireFx_Move) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_Move)b).duration=((FireFx_Move)a).duration;};
			list[3] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Move)a).durationScaleType = (TimeScaleType) b;};
			_info.getter = a =>((FireFx_Move) a).durationScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((FireFx_Move)b).durationScaleType=((FireFx_Move)a).durationScaleType;};
			list[4] = new EditableProperty("durationScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Move)a).ease = (EaseType) b;};
			_info.getter = a =>((FireFx_Move) a).ease;
			_info.propertyType = typeof(EaseType);
			_info.copier=(a,b)=>{((FireFx_Move)b).ease=((FireFx_Move)a).ease;};
			list[5] = new EditableProperty("ease",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void FireFx_Pull_PropertyWrap(){
			Type t = typeof(FireFx_Pull);
			EditableProperty[] list = new EditableProperty[6];
			_info.setter=(a,b)=>{((FireFx_Pull)a).groupPhase = (int) b;};
			_info.getter = a =>((FireFx_Pull) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((FireFx_Pull)b).groupPhase=((FireFx_Pull)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Pull)a).time = (float) b;};
			_info.getter = a =>((FireFx_Pull) a).time;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_Pull)b).time=((FireFx_Pull)a).time;};
			list[1] = new EditableProperty("time",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Pull)a).timeScaleType = (TimeScaleType) b;};
			_info.getter = a =>((FireFx_Pull) a).timeScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((FireFx_Pull)b).timeScaleType=((FireFx_Pull)a).timeScaleType;};
			list[2] = new EditableProperty("timeScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Pull)a).duration = (float) b;};
			_info.getter = a =>((FireFx_Pull) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_Pull)b).duration=((FireFx_Pull)a).duration;};
			list[3] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Pull)a).durationScaleType = (TimeScaleType) b;};
			_info.getter = a =>((FireFx_Pull) a).durationScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((FireFx_Pull)b).durationScaleType=((FireFx_Pull)a).durationScaleType;};
			list[4] = new EditableProperty("durationScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Pull)a).ease = (EaseType) b;};
			_info.getter = a =>((FireFx_Pull) a).ease;
			_info.propertyType = typeof(EaseType);
			_info.copier=(a,b)=>{((FireFx_Pull)b).ease=((FireFx_Pull)a).ease;};
			list[5] = new EditableProperty("ease",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void FireFx_TimeScale_PropertyWrap(){
			Type t = typeof(FireFx_TimeScale);
			EditableProperty[] list = new EditableProperty[6];
			_info.setter=(a,b)=>{((FireFx_TimeScale)a).groupPhase = (int) b;};
			_info.getter = a =>((FireFx_TimeScale) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((FireFx_TimeScale)b).groupPhase=((FireFx_TimeScale)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_TimeScale)a).time = (float) b;};
			_info.getter = a =>((FireFx_TimeScale) a).time;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_TimeScale)b).time=((FireFx_TimeScale)a).time;};
			list[1] = new EditableProperty("time",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_TimeScale)a).timeScaleType = (TimeScaleType) b;};
			_info.getter = a =>((FireFx_TimeScale) a).timeScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((FireFx_TimeScale)b).timeScaleType=((FireFx_TimeScale)a).timeScaleType;};
			list[2] = new EditableProperty("timeScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_TimeScale)a).scaleType = (TimeScaleType) b;};
			_info.getter = a =>((FireFx_TimeScale) a).scaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((FireFx_TimeScale)b).scaleType=((FireFx_TimeScale)a).scaleType;};
			list[3] = new EditableProperty("scaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_TimeScale)a).scale = (float) b;};
			_info.getter = a =>((FireFx_TimeScale) a).scale;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_TimeScale)b).scale=((FireFx_TimeScale)a).scale;};
			list[4] = new EditableProperty("scale",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_TimeScale)a).phase = (int) b;};
			_info.getter = a =>((FireFx_TimeScale) a).phase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((FireFx_TimeScale)b).phase=((FireFx_TimeScale)a).phase;};
			list[5] = new EditableProperty("phase",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletFx_BoneBoundler_PropertyWrap(){
			Type t = typeof(BulletFx_BoneBoundler);
			EditableProperty[] list = new EditableProperty[9];
			_info.setter=(a,b)=>{((BulletFx_BoneBoundler)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletFx_BoneBoundler) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletFx_BoneBoundler)b).groupPhase=((BulletFx_BoneBoundler)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_BoneBoundler)a).time = (float) b;};
			_info.getter = a =>((BulletFx_BoneBoundler) a).time;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_BoneBoundler)b).time=((BulletFx_BoneBoundler)a).time;};
			list[1] = new EditableProperty("time",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_BoneBoundler)a).timeScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletFx_BoneBoundler) a).timeScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletFx_BoneBoundler)b).timeScaleType=((BulletFx_BoneBoundler)a).timeScaleType;};
			list[2] = new EditableProperty("timeScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_BoneBoundler)a).duration = (float) b;};
			_info.getter = a =>((BulletFx_BoneBoundler) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_BoneBoundler)b).duration=((BulletFx_BoneBoundler)a).duration;};
			list[3] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_BoneBoundler)a).durationScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletFx_BoneBoundler) a).durationScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletFx_BoneBoundler)b).durationScaleType=((BulletFx_BoneBoundler)a).durationScaleType;};
			list[4] = new EditableProperty("durationScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_BoneBoundler)a).boneName = (string) b;};
			_info.getter = a =>((BulletFx_BoneBoundler) a).boneName;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((BulletFx_BoneBoundler)b).boneName=((BulletFx_BoneBoundler)a).boneName;};
			list[5] = new EditableProperty("boneName",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_BoneBoundler)a).position = (Vector3) b;};
			_info.getter = a =>((BulletFx_BoneBoundler) a).position;
			_info.propertyType = typeof(Vector3);
			_info.copier=(a,b)=>{((BulletFx_BoneBoundler)b).position=((BulletFx_BoneBoundler)a).position;};
			list[6] = new EditableProperty("position",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_BoneBoundler)a).rotate = (Vector3) b;};
			_info.getter = a =>((BulletFx_BoneBoundler) a).rotate;
			_info.propertyType = typeof(Vector3);
			_info.copier=(a,b)=>{((BulletFx_BoneBoundler)b).rotate=((BulletFx_BoneBoundler)a).rotate;};
			list[7] = new EditableProperty("rotate",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_BoneBoundler)a).scale = (Vector3) b;};
			_info.getter = a =>((BulletFx_BoneBoundler) a).scale;
			_info.propertyType = typeof(Vector3);
			_info.copier=(a,b)=>{((BulletFx_BoneBoundler)b).scale=((BulletFx_BoneBoundler)a).scale;};
			list[8] = new EditableProperty("scale",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletFx_Chain_PropertyWrap(){
			Type t = typeof(BulletFx_Chain);
			EditableProperty[] list = new EditableProperty[4];
			_info.setter=(a,b)=>{((BulletFx_Chain)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletFx_Chain) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletFx_Chain)b).groupPhase=((BulletFx_Chain)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Chain)a).asset = (string) b;};
			_info.getter = a =>((BulletFx_Chain) a).asset;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((BulletFx_Chain)b).asset=((BulletFx_Chain)a).asset;};
			list[1] = new EditableProperty("asset",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Chain)a).mode = (BulletChainMode) b;};
			_info.getter = a =>((BulletFx_Chain) a).mode;
			_info.propertyType = typeof(BulletChainMode);
			_info.copier=(a,b)=>{((BulletFx_Chain)b).mode=((BulletFx_Chain)a).mode;};
			list[2] = new EditableProperty("mode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Chain)a).size = (float) b;};
			_info.getter = a =>((BulletFx_Chain) a).size;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_Chain)b).size=((BulletFx_Chain)a).size;};
			list[3] = new EditableProperty("size",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletFx_Create_PropertyWrap(){
			Type t = typeof(BulletFx_Create);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((BulletFx_Create)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletFx_Create) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletFx_Create)b).groupPhase=((BulletFx_Create)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Create)a).asset = (string) b;};
			_info.getter = a =>((BulletFx_Create) a).asset;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((BulletFx_Create)b).asset=((BulletFx_Create)a).asset;};
			list[1] = new EditableProperty("asset",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletFx_Fall_PropertyWrap(){
			Type t = typeof(BulletFx_Fall);
			EditableProperty[] list = new EditableProperty[4];
			_info.setter=(a,b)=>{((BulletFx_Fall)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletFx_Fall) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletFx_Fall)b).groupPhase=((BulletFx_Fall)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Fall)a).speed = (float) b;};
			_info.getter = a =>((BulletFx_Fall) a).speed;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_Fall)b).speed=((BulletFx_Fall)a).speed;};
			list[1] = new EditableProperty("speed",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Fall)a).speedScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletFx_Fall) a).speedScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletFx_Fall)b).speedScaleType=((BulletFx_Fall)a).speedScaleType;};
			list[2] = new EditableProperty("speedScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Fall)a).orientMode = (OrientMode) b;};
			_info.getter = a =>((BulletFx_Fall) a).orientMode;
			_info.propertyType = typeof(OrientMode);
			_info.copier=(a,b)=>{((BulletFx_Fall)b).orientMode=((BulletFx_Fall)a).orientMode;};
			list[3] = new EditableProperty("orientMode",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletFx_Fly_PropertyWrap(){
			Type t = typeof(BulletFx_Fly);
			EditableProperty[] list = new EditableProperty[6];
			_info.setter=(a,b)=>{((BulletFx_Fly)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletFx_Fly) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletFx_Fly)b).groupPhase=((BulletFx_Fly)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Fly)a).speed = (float) b;};
			_info.getter = a =>((BulletFx_Fly) a).speed;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_Fly)b).speed=((BulletFx_Fly)a).speed;};
			list[1] = new EditableProperty("speed",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Fly)a).speedScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletFx_Fly) a).speedScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletFx_Fly)b).speedScaleType=((BulletFx_Fly)a).speedScaleType;};
			list[2] = new EditableProperty("speedScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Fly)a).orientMode = (OrientMode) b;};
			_info.getter = a =>((BulletFx_Fly) a).orientMode;
			_info.propertyType = typeof(OrientMode);
			_info.copier=(a,b)=>{((BulletFx_Fly)b).orientMode=((BulletFx_Fly)a).orientMode;};
			list[3] = new EditableProperty("orientMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Fly)a).direction = (BulletFlyDirection) b;};
			_info.getter = a =>((BulletFx_Fly) a).direction;
			_info.propertyType = typeof(BulletFlyDirection);
			_info.copier=(a,b)=>{((BulletFx_Fly)b).direction=((BulletFx_Fly)a).direction;};
			list[4] = new EditableProperty("direction",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Fly)a).orientDir = (BulletFlyDirection) b;};
			_info.getter = a =>((BulletFx_Fly) a).orientDir;
			_info.propertyType = typeof(BulletFlyDirection);
			_info.copier=(a,b)=>{((BulletFx_Fly)b).orientDir=((BulletFx_Fly)a).orientDir;};
			list[5] = new EditableProperty("orientDir",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletFx_Follow_PropertyWrap(){
			Type t = typeof(BulletFx_Follow);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((BulletFx_Follow)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletFx_Follow) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletFx_Follow)b).groupPhase=((BulletFx_Follow)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Follow)a).duration = (float) b;};
			_info.getter = a =>((BulletFx_Follow) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_Follow)b).duration=((BulletFx_Follow)a).duration;};
			list[1] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Follow)a).durationScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletFx_Follow) a).durationScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletFx_Follow)b).durationScaleType=((BulletFx_Follow)a).durationScaleType;};
			list[2] = new EditableProperty("durationScaleType",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletFx_LookAt_PropertyWrap(){
			Type t = typeof(BulletFx_LookAt);
			EditableProperty[] list = new EditableProperty[8];
			_info.setter=(a,b)=>{((BulletFx_LookAt)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletFx_LookAt) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletFx_LookAt)b).groupPhase=((BulletFx_LookAt)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_LookAt)a).duration = (float) b;};
			_info.getter = a =>((BulletFx_LookAt) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_LookAt)b).duration=((BulletFx_LookAt)a).duration;};
			list[1] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_LookAt)a).durationScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletFx_LookAt) a).durationScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletFx_LookAt)b).durationScaleType=((BulletFx_LookAt)a).durationScaleType;};
			list[2] = new EditableProperty("durationScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_LookAt)a).orientMode = (OrientMode) b;};
			_info.getter = a =>((BulletFx_LookAt) a).orientMode;
			_info.propertyType = typeof(OrientMode);
			_info.copier=(a,b)=>{((BulletFx_LookAt)b).orientMode=((BulletFx_LookAt)a).orientMode;};
			list[3] = new EditableProperty("orientMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_LookAt)a).dirMode = (BulletDirMode) b;};
			_info.getter = a =>((BulletFx_LookAt) a).dirMode;
			_info.propertyType = typeof(BulletDirMode);
			_info.copier=(a,b)=>{((BulletFx_LookAt)b).dirMode=((BulletFx_LookAt)a).dirMode;};
			list[4] = new EditableProperty("dirMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_LookAt)a).hostType = (BulletLookAtHost) b;};
			_info.getter = a =>((BulletFx_LookAt) a).hostType;
			_info.propertyType = typeof(BulletLookAtHost);
			_info.copier=(a,b)=>{((BulletFx_LookAt)b).hostType=((BulletFx_LookAt)a).hostType;};
			list[5] = new EditableProperty("hostType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_LookAt)a).updatePosition = (bool) b;};
			_info.getter = a =>((BulletFx_LookAt) a).updatePosition;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((BulletFx_LookAt)b).updatePosition=((BulletFx_LookAt)a).updatePosition;};
			list[6] = new EditableProperty("updatePosition",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_LookAt)a).useParentLife = (bool) b;};
			_info.getter = a =>((BulletFx_LookAt) a).useParentLife;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((BulletFx_LookAt)b).useParentLife=((BulletFx_LookAt)a).useParentLife;};
			list[7] = new EditableProperty("useParentLife",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletFx_Parabola_PropertyWrap(){
			Type t = typeof(BulletFx_Parabola);
			EditableProperty[] list = new EditableProperty[5];
			_info.setter=(a,b)=>{((BulletFx_Parabola)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletFx_Parabola) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletFx_Parabola)b).groupPhase=((BulletFx_Parabola)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Parabola)a).velocity = (Vector3) b;};
			_info.getter = a =>((BulletFx_Parabola) a).velocity;
			_info.propertyType = typeof(Vector3);
			_info.copier=(a,b)=>{((BulletFx_Parabola)b).velocity=((BulletFx_Parabola)a).velocity;};
			list[1] = new EditableProperty("velocity",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Parabola)a).gravity = (Vector3) b;};
			_info.getter = a =>((BulletFx_Parabola) a).gravity;
			_info.propertyType = typeof(Vector3);
			_info.copier=(a,b)=>{((BulletFx_Parabola)b).gravity=((BulletFx_Parabola)a).gravity;};
			list[2] = new EditableProperty("gravity",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Parabola)a).orientMode = (OrientMode) b;};
			_info.getter = a =>((BulletFx_Parabola) a).orientMode;
			_info.propertyType = typeof(OrientMode);
			_info.copier=(a,b)=>{((BulletFx_Parabola)b).orientMode=((BulletFx_Parabola)a).orientMode;};
			list[3] = new EditableProperty("orientMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Parabola)a).speedScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletFx_Parabola) a).speedScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletFx_Parabola)b).speedScaleType=((BulletFx_Parabola)a).speedScaleType;};
			list[4] = new EditableProperty("speedScaleType",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletFx_Play_PropertyWrap(){
			Type t = typeof(BulletFx_Play);
			EditableProperty[] list = new EditableProperty[6];
			_info.setter=(a,b)=>{((BulletFx_Play)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletFx_Play) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletFx_Play)b).groupPhase=((BulletFx_Play)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Play)a).duration = (float) b;};
			_info.getter = a =>((BulletFx_Play) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_Play)b).duration=((BulletFx_Play)a).duration;};
			list[1] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Play)a).durationScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletFx_Play) a).durationScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletFx_Play)b).durationScaleType=((BulletFx_Play)a).durationScaleType;};
			list[2] = new EditableProperty("durationScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Play)a).animatorScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletFx_Play) a).animatorScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletFx_Play)b).animatorScaleType=((BulletFx_Play)a).animatorScaleType;};
			list[3] = new EditableProperty("animatorScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Play)a).orientMode = (OrientMode) b;};
			_info.getter = a =>((BulletFx_Play) a).orientMode;
			_info.propertyType = typeof(OrientMode);
			_info.copier=(a,b)=>{((BulletFx_Play)b).orientMode=((BulletFx_Play)a).orientMode;};
			list[4] = new EditableProperty("orientMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Play)a).dirMode = (BulletDirMode) b;};
			_info.getter = a =>((BulletFx_Play) a).dirMode;
			_info.propertyType = typeof(BulletDirMode);
			_info.copier=(a,b)=>{((BulletFx_Play)b).dirMode=((BulletFx_Play)a).dirMode;};
			list[5] = new EditableProperty("dirMode",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletFx_Seek_PropertyWrap(){
			Type t = typeof(BulletFx_Seek);
			EditableProperty[] list = new EditableProperty[12];
			_info.setter=(a,b)=>{((BulletFx_Seek)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletFx_Seek) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletFx_Seek)b).groupPhase=((BulletFx_Seek)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Seek)a).velocityOffset = (Vector3) b;};
			_info.getter = a =>((BulletFx_Seek) a).velocityOffset;
			_info.propertyType = typeof(Vector3);
			_info.copier=(a,b)=>{((BulletFx_Seek)b).velocityOffset=((BulletFx_Seek)a).velocityOffset;};
			list[1] = new EditableProperty("velocityOffset",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Seek)a).velocityMax = (Vector3) b;};
			_info.getter = a =>((BulletFx_Seek) a).velocityMax;
			_info.propertyType = typeof(Vector3);
			_info.copier=(a,b)=>{((BulletFx_Seek)b).velocityMax=((BulletFx_Seek)a).velocityMax;};
			list[2] = new EditableProperty("velocityMax",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Seek)a).velocityMin = (Vector3) b;};
			_info.getter = a =>((BulletFx_Seek) a).velocityMin;
			_info.propertyType = typeof(Vector3);
			_info.copier=(a,b)=>{((BulletFx_Seek)b).velocityMin=((BulletFx_Seek)a).velocityMin;};
			list[3] = new EditableProperty("velocityMin",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Seek)a).speed = (float) b;};
			_info.getter = a =>((BulletFx_Seek) a).speed;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_Seek)b).speed=((BulletFx_Seek)a).speed;};
			list[4] = new EditableProperty("speed",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Seek)a).maxSpeed = (float) b;};
			_info.getter = a =>((BulletFx_Seek) a).maxSpeed;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_Seek)b).maxSpeed=((BulletFx_Seek)a).maxSpeed;};
			list[5] = new EditableProperty("maxSpeed",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Seek)a).maxForce = (float) b;};
			_info.getter = a =>((BulletFx_Seek) a).maxForce;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_Seek)b).maxForce=((BulletFx_Seek)a).maxForce;};
			list[6] = new EditableProperty("maxForce",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Seek)a).arriveThreshhold = (float) b;};
			_info.getter = a =>((BulletFx_Seek) a).arriveThreshhold;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_Seek)b).arriveThreshhold=((BulletFx_Seek)a).arriveThreshhold;};
			list[7] = new EditableProperty("arriveThreshhold",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Seek)a).mass = (float) b;};
			_info.getter = a =>((BulletFx_Seek) a).mass;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_Seek)b).mass=((BulletFx_Seek)a).mass;};
			list[8] = new EditableProperty("mass",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Seek)a).maxDuration = (float) b;};
			_info.getter = a =>((BulletFx_Seek) a).maxDuration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_Seek)b).maxDuration=((BulletFx_Seek)a).maxDuration;};
			list[9] = new EditableProperty("maxDuration",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Seek)a).orientMode = (OrientMode) b;};
			_info.getter = a =>((BulletFx_Seek) a).orientMode;
			_info.propertyType = typeof(OrientMode);
			_info.copier=(a,b)=>{((BulletFx_Seek)b).orientMode=((BulletFx_Seek)a).orientMode;};
			list[10] = new EditableProperty("orientMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Seek)a).speedScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletFx_Seek) a).speedScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletFx_Seek)b).speedScaleType=((BulletFx_Seek)a).speedScaleType;};
			list[11] = new EditableProperty("speedScaleType",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletFx_Tween_PropertyWrap(){
			Type t = typeof(BulletFx_Tween);
			EditableProperty[] list = new EditableProperty[7];
			_info.setter=(a,b)=>{((BulletFx_Tween)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletFx_Tween) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletFx_Tween)b).groupPhase=((BulletFx_Tween)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Tween)a).duration = (float) b;};
			_info.getter = a =>((BulletFx_Tween) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletFx_Tween)b).duration=((BulletFx_Tween)a).duration;};
			list[1] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Tween)a).durationScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletFx_Tween) a).durationScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletFx_Tween)b).durationScaleType=((BulletFx_Tween)a).durationScaleType;};
			list[2] = new EditableProperty("durationScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Tween)a).orientMode = (OrientMode) b;};
			_info.getter = a =>((BulletFx_Tween) a).orientMode;
			_info.propertyType = typeof(OrientMode);
			_info.copier=(a,b)=>{((BulletFx_Tween)b).orientMode=((BulletFx_Tween)a).orientMode;};
			list[3] = new EditableProperty("orientMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Tween)a).easeType = (EaseType) b;};
			_info.getter = a =>((BulletFx_Tween) a).easeType;
			_info.propertyType = typeof(EaseType);
			_info.copier=(a,b)=>{((BulletFx_Tween)b).easeType=((BulletFx_Tween)a).easeType;};
			list[4] = new EditableProperty("easeType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Tween)a).loopType = (TweenLoopType) b;};
			_info.getter = a =>((BulletFx_Tween) a).loopType;
			_info.propertyType = typeof(TweenLoopType);
			_info.copier=(a,b)=>{((BulletFx_Tween)b).loopType=((BulletFx_Tween)a).loopType;};
			list[5] = new EditableProperty("loopType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletFx_Tween)a).loops = (int) b;};
			_info.getter = a =>((BulletFx_Tween) a).loops;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletFx_Tween)b).loops=((BulletFx_Tween)a).loops;};
			list[6] = new EditableProperty("loops",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletPos_Area_PropertyWrap(){
			Type t = typeof(BulletPos_Area);
			EditableProperty[] list = new EditableProperty[5];
			_info.setter=(a,b)=>{((BulletPos_Area)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletPos_Area) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletPos_Area)b).groupPhase=((BulletPos_Area)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Area)a).calcMode = (BullectCalcMode) b;};
			_info.getter = a =>((BulletPos_Area) a).calcMode;
			_info.propertyType = typeof(BullectCalcMode);
			_info.copier=(a,b)=>{((BulletPos_Area)b).calcMode=((BulletPos_Area)a).calcMode;};
			list[1] = new EditableProperty("calcMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Area)a).minArea = (Vector3) b;};
			_info.getter = a =>((BulletPos_Area) a).minArea;
			_info.propertyType = typeof(Vector3);
			_info.copier=(a,b)=>{((BulletPos_Area)b).minArea=((BulletPos_Area)a).minArea;};
			list[2] = new EditableProperty("minArea",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Area)a).maxArea = (Vector3) b;};
			_info.getter = a =>((BulletPos_Area) a).maxArea;
			_info.propertyType = typeof(Vector3);
			_info.copier=(a,b)=>{((BulletPos_Area)b).maxArea=((BulletPos_Area)a).maxArea;};
			list[3] = new EditableProperty("maxArea",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Area)a).offset = (Vector3) b;};
			_info.getter = a =>((BulletPos_Area) a).offset;
			_info.propertyType = typeof(Vector3);
			_info.copier=(a,b)=>{((BulletPos_Area)b).offset=((BulletPos_Area)a).offset;};
			list[4] = new EditableProperty("offset",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletPos_DividSpace_PropertyWrap(){
			Type t = typeof(BulletPos_DividSpace);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((BulletPos_DividSpace)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletPos_DividSpace) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletPos_DividSpace)b).groupPhase=((BulletPos_DividSpace)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_DividSpace)a).calcMode = (BullectCalcMode) b;};
			_info.getter = a =>((BulletPos_DividSpace) a).calcMode;
			_info.propertyType = typeof(BullectCalcMode);
			_info.copier=(a,b)=>{((BulletPos_DividSpace)b).calcMode=((BulletPos_DividSpace)a).calcMode;};
			list[1] = new EditableProperty("calcMode",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletPos_Line_PropertyWrap(){
			Type t = typeof(BulletPos_Line);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((BulletPos_Line)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletPos_Line) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletPos_Line)b).groupPhase=((BulletPos_Line)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Line)a).spaceMode = (BulletSpaceMode) b;};
			_info.getter = a =>((BulletPos_Line) a).spaceMode;
			_info.propertyType = typeof(BulletSpaceMode);
			_info.copier=(a,b)=>{((BulletPos_Line)b).spaceMode=((BulletPos_Line)a).spaceMode;};
			list[1] = new EditableProperty("spaceMode",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletPos_Ring_PropertyWrap(){
			Type t = typeof(BulletPos_Ring);
			EditableProperty[] list = new EditableProperty[8];
			_info.setter=(a,b)=>{((BulletPos_Ring)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletPos_Ring) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletPos_Ring)b).groupPhase=((BulletPos_Ring)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Ring)a).calcMode = (BullectCalcMode) b;};
			_info.getter = a =>((BulletPos_Ring) a).calcMode;
			_info.propertyType = typeof(BullectCalcMode);
			_info.copier=(a,b)=>{((BulletPos_Ring)b).calcMode=((BulletPos_Ring)a).calcMode;};
			list[1] = new EditableProperty("calcMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Ring)a).radiusMode = (BulletRingRadiusMode) b;};
			_info.getter = a =>((BulletPos_Ring) a).radiusMode;
			_info.propertyType = typeof(BulletRingRadiusMode);
			_info.copier=(a,b)=>{((BulletPos_Ring)b).radiusMode=((BulletPos_Ring)a).radiusMode;};
			list[2] = new EditableProperty("radiusMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Ring)a).angleMode = (BulletRingAngleMode) b;};
			_info.getter = a =>((BulletPos_Ring) a).angleMode;
			_info.propertyType = typeof(BulletRingAngleMode);
			_info.copier=(a,b)=>{((BulletPos_Ring)b).angleMode=((BulletPos_Ring)a).angleMode;};
			list[3] = new EditableProperty("angleMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Ring)a).maxRadius = (int) b;};
			_info.getter = a =>((BulletPos_Ring) a).maxRadius;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletPos_Ring)b).maxRadius=((BulletPos_Ring)a).maxRadius;};
			list[4] = new EditableProperty("maxRadius",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Ring)a).minRadius = (int) b;};
			_info.getter = a =>((BulletPos_Ring) a).minRadius;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletPos_Ring)b).minRadius=((BulletPos_Ring)a).minRadius;};
			list[5] = new EditableProperty("minRadius",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Ring)a).numRings = (int) b;};
			_info.getter = a =>((BulletPos_Ring) a).numRings;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletPos_Ring)b).numRings=((BulletPos_Ring)a).numRings;};
			list[6] = new EditableProperty("numRings",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Ring)a).numBulletPerRing = (int) b;};
			_info.getter = a =>((BulletPos_Ring) a).numBulletPerRing;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletPos_Ring)b).numBulletPerRing=((BulletPos_Ring)a).numBulletPerRing;};
			list[7] = new EditableProperty("numBulletPerRing",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletPos_Sector_PropertyWrap(){
			Type t = typeof(BulletPos_Sector);
			EditableProperty[] list = new EditableProperty[4];
			_info.setter=(a,b)=>{((BulletPos_Sector)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletPos_Sector) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletPos_Sector)b).groupPhase=((BulletPos_Sector)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Sector)a).startAngle = (float) b;};
			_info.getter = a =>((BulletPos_Sector) a).startAngle;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletPos_Sector)b).startAngle=((BulletPos_Sector)a).startAngle;};
			list[1] = new EditableProperty("startAngle",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Sector)a).angle = (float) b;};
			_info.getter = a =>((BulletPos_Sector) a).angle;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletPos_Sector)b).angle=((BulletPos_Sector)a).angle;};
			list[2] = new EditableProperty("angle",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletPos_Sector)a).angleMode = (BulletAngleMode) b;};
			_info.getter = a =>((BulletPos_Sector) a).angleMode;
			_info.propertyType = typeof(BulletAngleMode);
			_info.copier=(a,b)=>{((BulletPos_Sector)b).angleMode=((BulletPos_Sector)a).angleMode;};
			list[3] = new EditableProperty("angleMode",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void FireFxRoot_PropertyWrap(){
			Type t = typeof(FireFxRoot);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((FireFxRoot)a).groupPhase = (int) b;};
			_info.getter = a =>((FireFxRoot) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((FireFxRoot)b).groupPhase=((FireFxRoot)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletEmitter_Line_PropertyWrap(){
			Type t = typeof(BulletEmitter_Line);
			EditableProperty[] list = new EditableProperty[16];
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletEmitter_Line) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).groupPhase=((BulletEmitter_Line)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).time = (float) b;};
			_info.getter = a =>((BulletEmitter_Line) a).time;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).time=((BulletEmitter_Line)a).time;};
			list[1] = new EditableProperty("time",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).timeScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletEmitter_Line) a).timeScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).timeScaleType=((BulletEmitter_Line)a).timeScaleType;};
			list[2] = new EditableProperty("timeScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).duration = (float) b;};
			_info.getter = a =>((BulletEmitter_Line) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).duration=((BulletEmitter_Line)a).duration;};
			list[3] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).durationScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletEmitter_Line) a).durationScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).durationScaleType=((BulletEmitter_Line)a).durationScaleType;};
			list[4] = new EditableProperty("durationScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).delay = (float) b;};
			_info.getter = a =>((BulletEmitter_Line) a).delay;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).delay=((BulletEmitter_Line)a).delay;};
			list[5] = new EditableProperty("delay",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).delayScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletEmitter_Line) a).delayScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).delayScaleType=((BulletEmitter_Line)a).delayScaleType;};
			list[6] = new EditableProperty("delayScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).numParticle = (int) b;};
			_info.getter = a =>((BulletEmitter_Line) a).numParticle;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).numParticle=((BulletEmitter_Line)a).numParticle;};
			list[7] = new EditableProperty("numParticle",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).interval = (float) b;};
			_info.getter = a =>((BulletEmitter_Line) a).interval;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).interval=((BulletEmitter_Line)a).interval;};
			list[8] = new EditableProperty("interval",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).useRandomDelay = (bool) b;};
			_info.getter = a =>((BulletEmitter_Line) a).useRandomDelay;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).useRandomDelay=((BulletEmitter_Line)a).useRandomDelay;};
			list[9] = new EditableProperty("useRandomDelay",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).maxDistance = (float) b;};
			_info.getter = a =>((BulletEmitter_Line) a).maxDistance;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).maxDistance=((BulletEmitter_Line)a).maxDistance;};
			list[10] = new EditableProperty("maxDistance",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).minDistance = (float) b;};
			_info.getter = a =>((BulletEmitter_Line) a).minDistance;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).minDistance=((BulletEmitter_Line)a).minDistance;};
			list[11] = new EditableProperty("minDistance",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).startMode = (BulletPositionMode) b;};
			_info.getter = a =>((BulletEmitter_Line) a).startMode;
			_info.propertyType = typeof(BulletPositionMode);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).startMode=((BulletEmitter_Line)a).startMode;};
			list[12] = new EditableProperty("startMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).destinyMode = (BulletPositionMode) b;};
			_info.getter = a =>((BulletEmitter_Line) a).destinyMode;
			_info.propertyType = typeof(BulletPositionMode);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).destinyMode=((BulletEmitter_Line)a).destinyMode;};
			list[13] = new EditableProperty("destinyMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).lineMode = (BulletLineMode) b;};
			_info.getter = a =>((BulletEmitter_Line) a).lineMode;
			_info.propertyType = typeof(BulletLineMode);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).lineMode=((BulletEmitter_Line)a).lineMode;};
			list[14] = new EditableProperty("lineMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Line)a).space = (float) b;};
			_info.getter = a =>((BulletEmitter_Line) a).space;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletEmitter_Line)b).space=((BulletEmitter_Line)a).space;};
			list[15] = new EditableProperty("space",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void BulletEmitter_Normal_PropertyWrap(){
			Type t = typeof(BulletEmitter_Normal);
			EditableProperty[] list = new EditableProperty[15];
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).groupPhase = (int) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).groupPhase=((BulletEmitter_Normal)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).time = (float) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).time;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).time=((BulletEmitter_Normal)a).time;};
			list[1] = new EditableProperty("time",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).timeScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).timeScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).timeScaleType=((BulletEmitter_Normal)a).timeScaleType;};
			list[2] = new EditableProperty("timeScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).duration = (float) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).duration=((BulletEmitter_Normal)a).duration;};
			list[3] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).durationScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).durationScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).durationScaleType=((BulletEmitter_Normal)a).durationScaleType;};
			list[4] = new EditableProperty("durationScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).delay = (float) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).delay;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).delay=((BulletEmitter_Normal)a).delay;};
			list[5] = new EditableProperty("delay",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).delayScaleType = (TimeScaleType) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).delayScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).delayScaleType=((BulletEmitter_Normal)a).delayScaleType;};
			list[6] = new EditableProperty("delayScaleType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).numParticle = (int) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).numParticle;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).numParticle=((BulletEmitter_Normal)a).numParticle;};
			list[7] = new EditableProperty("numParticle",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).interval = (float) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).interval;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).interval=((BulletEmitter_Normal)a).interval;};
			list[8] = new EditableProperty("interval",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).useRandomDelay = (bool) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).useRandomDelay;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).useRandomDelay=((BulletEmitter_Normal)a).useRandomDelay;};
			list[9] = new EditableProperty("useRandomDelay",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).maxDistance = (float) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).maxDistance;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).maxDistance=((BulletEmitter_Normal)a).maxDistance;};
			list[10] = new EditableProperty("maxDistance",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).minDistance = (float) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).minDistance;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).minDistance=((BulletEmitter_Normal)a).minDistance;};
			list[11] = new EditableProperty("minDistance",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).startMode = (BulletPositionMode) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).startMode;
			_info.propertyType = typeof(BulletPositionMode);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).startMode=((BulletEmitter_Normal)a).startMode;};
			list[12] = new EditableProperty("startMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).destinyMode = (BulletPositionMode) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).destinyMode;
			_info.propertyType = typeof(BulletPositionMode);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).destinyMode=((BulletEmitter_Normal)a).destinyMode;};
			list[13] = new EditableProperty("destinyMode",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((BulletEmitter_Normal)a).qtyMode = (BulletQtyMode) b;};
			_info.getter = a =>((BulletEmitter_Normal) a).qtyMode;
			_info.propertyType = typeof(BulletQtyMode);
			_info.copier=(a,b)=>{((BulletEmitter_Normal)b).qtyMode=((BulletEmitter_Normal)a).qtyMode;};
			list[14] = new EditableProperty("qtyMode",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void FireFx_Parallel_PropertyWrap(){
			Type t = typeof(FireFx_Parallel);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((FireFx_Parallel)a).groupPhase = (int) b;};
			_info.getter = a =>((FireFx_Parallel) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((FireFx_Parallel)b).groupPhase=((FireFx_Parallel)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Parallel)a).time = (float) b;};
			_info.getter = a =>((FireFx_Parallel) a).time;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_Parallel)b).time=((FireFx_Parallel)a).time;};
			list[1] = new EditableProperty("time",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Parallel)a).timeScaleType = (TimeScaleType) b;};
			_info.getter = a =>((FireFx_Parallel) a).timeScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((FireFx_Parallel)b).timeScaleType=((FireFx_Parallel)a).timeScaleType;};
			list[2] = new EditableProperty("timeScaleType",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void FireFx_Phase_PropertyWrap(){
			Type t = typeof(FireFx_Phase);
			EditableProperty[] list = new EditableProperty[2];
			_info.setter=(a,b)=>{((FireFx_Phase)a).groupPhase = (int) b;};
			_info.getter = a =>((FireFx_Phase) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((FireFx_Phase)b).groupPhase=((FireFx_Phase)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Phase)a).phase = (int) b;};
			_info.getter = a =>((FireFx_Phase) a).phase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((FireFx_Phase)b).phase=((FireFx_Phase)a).phase;};
			list[1] = new EditableProperty("phase",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void FireFx_Sequence_PropertyWrap(){
			Type t = typeof(FireFx_Sequence);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((FireFx_Sequence)a).groupPhase = (int) b;};
			_info.getter = a =>((FireFx_Sequence) a).groupPhase;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((FireFx_Sequence)b).groupPhase=((FireFx_Sequence)a).groupPhase;};
			list[0] = new EditableProperty("groupPhase",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Sequence)a).time = (float) b;};
			_info.getter = a =>((FireFx_Sequence) a).time;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((FireFx_Sequence)b).time=((FireFx_Sequence)a).time;};
			list[1] = new EditableProperty("time",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((FireFx_Sequence)a).timeScaleType = (TimeScaleType) b;};
			_info.getter = a =>((FireFx_Sequence) a).timeScaleType;
			_info.propertyType = typeof(TimeScaleType);
			_info.copier=(a,b)=>{((FireFx_Sequence)b).timeScaleType=((FireFx_Sequence)a).timeScaleType;};
			list[2] = new EditableProperty("timeScaleType",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void PanelSetting_ChildSelect_PropertyWrap(){
			Type t = typeof(PanelSetting_ChildSelect);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((PanelSetting_ChildSelect)a).control = (string) b;};
			_info.getter = a =>((PanelSetting_ChildSelect) a).control;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((PanelSetting_ChildSelect)b).control=((PanelSetting_ChildSelect)a).control;};
			list[0] = new EditableProperty("control",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void PanelSetting_ChildStack_PropertyWrap(){
			Type t = typeof(PanelSetting_ChildStack);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((PanelSetting_ChildStack)a).control = (string) b;};
			_info.getter = a =>((PanelSetting_ChildStack) a).control;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((PanelSetting_ChildStack)b).control=((PanelSetting_ChildStack)a).control;};
			list[0] = new EditableProperty("control",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((PanelSetting_ChildStack)a).closeAsStackEmpty = (bool) b;};
			_info.getter = a =>((PanelSetting_ChildStack) a).closeAsStackEmpty;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((PanelSetting_ChildStack)b).closeAsStackEmpty=((PanelSetting_ChildStack)a).closeAsStackEmpty;};
			list[1] = new EditableProperty("closeAsStackEmpty",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((PanelSetting_ChildStack)a).autoOpenFirstChild = (bool) b;};
			_info.getter = a =>((PanelSetting_ChildStack) a).autoOpenFirstChild;
			_info.propertyType = typeof(bool);
			_info.copier=(a,b)=>{((PanelSetting_ChildStack)b).autoOpenFirstChild=((PanelSetting_ChildStack)a).autoOpenFirstChild;};
			list[2] = new EditableProperty("autoOpenFirstChild",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void PanelSetting_Scene_PropertyWrap(){
			Type t = typeof(PanelSetting_Scene);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((PanelSetting_Scene)a).sceneAsset = (string) b;};
			_info.getter = a =>((PanelSetting_Scene) a).sceneAsset;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((PanelSetting_Scene)b).sceneAsset=((PanelSetting_Scene)a).sceneAsset;};
			list[0] = new EditableProperty("sceneAsset",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void PanelSetting_AutoClose_PropertyWrap(){
			Type t = typeof(PanelSetting_AutoClose);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((PanelSetting_AutoClose)a).policy = (ClosePolicy) b;};
			_info.getter = a =>((PanelSetting_AutoClose) a).policy;
			_info.propertyType = typeof(ClosePolicy);
			_info.copier=(a,b)=>{((PanelSetting_AutoClose)b).policy=((PanelSetting_AutoClose)a).policy;};
			list[0] = new EditableProperty("policy",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void PanelSetting_Lua_PropertyWrap(){
			Type t = typeof(PanelSetting_Lua);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((PanelSetting_Lua)a).luaFile = (string) b;};
			_info.getter = a =>((PanelSetting_Lua) a).luaFile;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((PanelSetting_Lua)b).luaFile=((PanelSetting_Lua)a).luaFile;};
			list[0] = new EditableProperty("luaFile",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void PanelSetting_Cull_PropertyWrap(){
			Type t = typeof(PanelSetting_Cull);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((PanelSetting_Cull)a).mode = (PanelCulling) b;};
			_info.getter = a =>((PanelSetting_Cull) a).mode;
			_info.propertyType = typeof(PanelCulling);
			_info.copier=(a,b)=>{((PanelSetting_Cull)b).mode=((PanelSetting_Cull)a).mode;};
			list[0] = new EditableProperty("mode",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void PanelSetting_Module_PropertyWrap(){
			Type t = typeof(PanelSetting_Module);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((PanelSetting_Module)a).module = (string) b;};
			_info.getter = a =>((PanelSetting_Module) a).module;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((PanelSetting_Module)b).module=((PanelSetting_Module)a).module;};
			list[0] = new EditableProperty("module",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void PanelSetting_Panel_PropertyWrap(){
			Type t = typeof(PanelSetting_Panel);
			EditableProperty[] list = new EditableProperty[6];
			_info.setter=(a,b)=>{((PanelSetting_Panel)a).mediatorName = (string) b;};
			_info.getter = a =>((PanelSetting_Panel) a).mediatorName;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((PanelSetting_Panel)b).mediatorName=((PanelSetting_Panel)a).mediatorName;};
			list[0] = new EditableProperty("mediatorName",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((PanelSetting_Panel)a).mediatorType = (MediatorType) b;};
			_info.getter = a =>((PanelSetting_Panel) a).mediatorType;
			_info.propertyType = typeof(MediatorType);
			_info.copier=(a,b)=>{((PanelSetting_Panel)b).mediatorType=((PanelSetting_Panel)a).mediatorType;};
			list[1] = new EditableProperty("mediatorType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((PanelSetting_Panel)a).prefab = (string) b;};
			_info.getter = a =>((PanelSetting_Panel) a).prefab;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((PanelSetting_Panel)b).prefab=((PanelSetting_Panel)a).prefab;};
			list[2] = new EditableProperty("prefab",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((PanelSetting_Panel)a).layer = (string) b;};
			_info.getter = a =>((PanelSetting_Panel) a).layer;
			_info.propertyType = typeof(string);
			_info.copier=(a,b)=>{((PanelSetting_Panel)b).layer=((PanelSetting_Panel)a).layer;};
			list[3] = new EditableProperty("layer",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((PanelSetting_Panel)a).sceneType = (SceneType) b;};
			_info.getter = a =>((PanelSetting_Panel) a).sceneType;
			_info.propertyType = typeof(SceneType);
			_info.copier=(a,b)=>{((PanelSetting_Panel)b).sceneType=((PanelSetting_Panel)a).sceneType;};
			list[4] = new EditableProperty("sceneType",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((PanelSetting_Panel)a).lifeMode = (AssetLife) b;};
			_info.getter = a =>((PanelSetting_Panel) a).lifeMode;
			_info.propertyType = typeof(AssetLife);
			_info.copier=(a,b)=>{((PanelSetting_Panel)b).lifeMode=((PanelSetting_Panel)a).lifeMode;};
			list[5] = new EditableProperty("lifeMode",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AICommand_Move_PropertyWrap(){
			Type t = typeof(AICommand_Move);
			EditableProperty[] list = new EditableProperty[5];
			_info.setter=(a,b)=>{((AICommand_Move)a).priority = (int) b;};
			_info.getter = a =>((AICommand_Move) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AICommand_Move)b).priority=((AICommand_Move)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_Move)a).threshold = (float) b;};
			_info.getter = a =>((AICommand_Move) a).threshold;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_Move)b).threshold=((AICommand_Move)a).threshold;};
			list[1] = new EditableProperty("threshold",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_Move)a).duration = (float) b;};
			_info.getter = a =>((AICommand_Move) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_Move)b).duration=((AICommand_Move)a).duration;};
			list[2] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_Move)a).forcastLen = (float) b;};
			_info.getter = a =>((AICommand_Move) a).forcastLen;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_Move)b).forcastLen=((AICommand_Move)a).forcastLen;};
			list[3] = new EditableProperty("forcastLen",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_Move)a).maxSpeedMulitple = (float) b;};
			_info.getter = a =>((AICommand_Move) a).maxSpeedMulitple;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_Move)b).maxSpeedMulitple=((AICommand_Move)a).maxSpeedMulitple;};
			list[4] = new EditableProperty("maxSpeedMulitple",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AICommand_MoveElastic_PropertyWrap(){
			Type t = typeof(AICommand_MoveElastic);
			EditableProperty[] list = new EditableProperty[5];
			_info.setter=(a,b)=>{((AICommand_MoveElastic)a).priority = (int) b;};
			_info.getter = a =>((AICommand_MoveElastic) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AICommand_MoveElastic)b).priority=((AICommand_MoveElastic)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_MoveElastic)a).elastic = (float) b;};
			_info.getter = a =>((AICommand_MoveElastic) a).elastic;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_MoveElastic)b).elastic=((AICommand_MoveElastic)a).elastic;};
			list[1] = new EditableProperty("elastic",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_MoveElastic)a).maxSpeed = (float) b;};
			_info.getter = a =>((AICommand_MoveElastic) a).maxSpeed;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_MoveElastic)b).maxSpeed=((AICommand_MoveElastic)a).maxSpeed;};
			list[2] = new EditableProperty("maxSpeed",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_MoveElastic)a).duration = (float) b;};
			_info.getter = a =>((AICommand_MoveElastic) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_MoveElastic)b).duration=((AICommand_MoveElastic)a).duration;};
			list[3] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_MoveElastic)a).updateThreshold = (float) b;};
			_info.getter = a =>((AICommand_MoveElastic) a).updateThreshold;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_MoveElastic)b).updateThreshold=((AICommand_MoveElastic)a).updateThreshold;};
			list[4] = new EditableProperty("updateThreshold",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AICommand_Stand_PropertyWrap(){
			Type t = typeof(AICommand_Stand);
			EditableProperty[] list = new EditableProperty[3];
			_info.setter=(a,b)=>{((AICommand_Stand)a).priority = (int) b;};
			_info.getter = a =>((AICommand_Stand) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AICommand_Stand)b).priority=((AICommand_Stand)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_Stand)a).updateInterval = (float) b;};
			_info.getter = a =>((AICommand_Stand) a).updateInterval;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_Stand)b).updateInterval=((AICommand_Stand)a).updateInterval;};
			list[1] = new EditableProperty("updateInterval",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_Stand)a).standModePercent = (float) b;};
			_info.getter = a =>((AICommand_Stand) a).standModePercent;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_Stand)b).standModePercent=((AICommand_Stand)a).standModePercent;};
			list[2] = new EditableProperty("standModePercent",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AICommand_SteerMove_PropertyWrap(){
			Type t = typeof(AICommand_SteerMove);
			EditableProperty[] list = new EditableProperty[6];
			_info.setter=(a,b)=>{((AICommand_SteerMove)a).priority = (int) b;};
			_info.getter = a =>((AICommand_SteerMove) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AICommand_SteerMove)b).priority=((AICommand_SteerMove)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_SteerMove)a).mass = (float) b;};
			_info.getter = a =>((AICommand_SteerMove) a).mass;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_SteerMove)b).mass=((AICommand_SteerMove)a).mass;};
			list[1] = new EditableProperty("mass",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_SteerMove)a).maxSpeed = (float) b;};
			_info.getter = a =>((AICommand_SteerMove) a).maxSpeed;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_SteerMove)b).maxSpeed=((AICommand_SteerMove)a).maxSpeed;};
			list[2] = new EditableProperty("maxSpeed",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_SteerMove)a).maxForce = (float) b;};
			_info.getter = a =>((AICommand_SteerMove) a).maxForce;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_SteerMove)b).maxForce=((AICommand_SteerMove)a).maxForce;};
			list[3] = new EditableProperty("maxForce",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_SteerMove)a).arriveThreshold = (float) b;};
			_info.getter = a =>((AICommand_SteerMove) a).arriveThreshold;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_SteerMove)b).arriveThreshold=((AICommand_SteerMove)a).arriveThreshold;};
			list[4] = new EditableProperty("arriveThreshold",_info);
			EditableProperty.AddProperties(t,list);
			_info.setter=(a,b)=>{((AICommand_SteerMove)a).duration = (float) b;};
			_info.getter = a =>((AICommand_SteerMove) a).duration;
			_info.propertyType = typeof(float);
			_info.copier=(a,b)=>{((AICommand_SteerMove)b).duration=((AICommand_SteerMove)a).duration;};
			list[5] = new EditableProperty("duration",_info);
			EditableProperty.AddProperties(t,list);
		}
		private void AICommand_TestMove_PropertyWrap(){
			Type t = typeof(AICommand_TestMove);
			EditableProperty[] list = new EditableProperty[1];
			_info.setter=(a,b)=>{((AICommand_TestMove)a).priority = (int) b;};
			_info.getter = a =>((AICommand_TestMove) a).priority;
			_info.propertyType = typeof(int);
			_info.copier=(a,b)=>{((AICommand_TestMove)b).priority=((AICommand_TestMove)a).priority;};
			list[0] = new EditableProperty("priority",_info);
			EditableProperty.AddProperties(t,list);
		}
	}
}
