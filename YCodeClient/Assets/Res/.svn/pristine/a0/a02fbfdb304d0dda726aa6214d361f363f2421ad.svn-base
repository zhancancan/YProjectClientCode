using mono.ui.hud;
using pure.asset.manager;
using pure.asset.manager.utils;
using pure.database.interfaces;
using pure.stateMachine.interfaces;
using pure.ticker;
using pure.utils.debug;
using pure.utils.fileTools;
using pure.utils.memory;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class FlyTextEntity  :IEntity{
    private string[] _prefab;

    private int[] _changeValues;
    private Vector3 _position;
    private int _type;

    private long _showInterval;
    private long _lifeTime;
    private long _prevTime = -1;

    private IEnumerator _enumerator;

    private GameObject _model;

    string IEntity.name { get ; set ; }
    

    string IData.id { get ; set ; }

    public bool isDisposed {
        get {
            return false;
        }
    }

    public void UpdateNow(long now = -1) {
        if(_enumerator != null && !_enumerator.MoveNext()) {
            _enumerator = null;
        }

        if (_prevTime < 0) {
            _prevTime = now;
        }
        _lifeTime -= (now - _prevTime);
        if (_lifeTime < 0) {
            //Dispose();
        }

    }

    public void Init(int[] changeValue,Vector3 position,string[] prefabs) {
        
        _changeValues = changeValue;
        _position = position;

        _prefab = prefabs;

        _lifeTime = 3 * 1000;//--test todo

        Debug.Log("flyText init");
        GameTicker.sceneTicker.Add(this);
        _enumerator = ShowModel();
    }

    private IEnumerator ShowModel() {
        string file;

        for(int index = 0;index < _changeValues.Length; index++) {
            string prefab = _prefab[index];

            if (!ParseFile(prefab, out file)) {
                yield break;
            }

            IEnumerator e = AssetUtils.Load(AssetType.Prefab, file);
            while (e.MoveNext()) yield return null;
            e = AssetUtils.PickAsyn<GameObject>(AssetType.Prefab, file);
            while (e.MoveNext()) yield return null;
            GameObject go = AssetUtils.Pick<GameObject>(AssetType.Prefab, file);

            if (!go) {
                GlobalLogger.LogError(string.Format("prefab read error at {0}", file));
                yield break;
            }

            //-------------already get the prefab
            _model = GameObjectPool.Get(go, GameObjectPool.LifeMode.SceneLife);
            _model.SetActive(true);
            _model.transform.position = _position;

            _model.GetComponent<Text3D>().text = _changeValues[index].ToString();
            string txt = _model.GetComponent<Text3D>().text;
            Debug.Log("show health :" + txt);
        }
        

    }

    private bool ParseFile(string prefab,out string file) {
        file = string.Empty;
        if (string.IsNullOrEmpty(prefab)) {
            return false;
        }
        if(!FileTools.TryFile2Path(prefab, out file)) {
            GlobalLogger.LogError(string.Format("no prefab found by name {0}", prefab));
            return false;
        }

        if (!AssetUtils.Contains(AssetType.Prefab, file)) {
            GlobalLogger.LogError(string.Format("no prefab found in AssetUtils at {0}", file));
            return false;
        }

        return true;
    }


    void IEntity.Initialize() {
        //throw new NotImplementedException();
    }

    void IDisposable.Dispose() {
        if (_model != null) {
            GameObjectPool.ReturnInstance(_model);
        }
        GameTicker.sceneTicker.Remove(this);
        Debug.Log("flyTextDispose");
    }

}
