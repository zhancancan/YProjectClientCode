using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using edit.pure.tools.reflection;
using edit.pure.ui;
using LuaInterface;
using pure.lua;
using UnityEditor;

namespace plugins.lua {
    internal class LuaNamespaceCommand {
        private static List<Type> exports;

        [MenuItem("Wrapper/Lua/Build Namespace")]
        internal static void BuildLuaNameSpace() {
            new LuaNamespaceCommand().Start();
        }

        private IEnumerator _runner;

        private void Start() {
            EditorApplication.update += Update;
            _runner = Do();
        }

        private void Update() {
            if (_runner != null) {
                while (_runner.MoveNext()) {
                }
                EditorApplication.update -= Update;
                _runner = null;
            }
        }

        private IEnumerator Do() {
            IEnumerator e = CollectExports();
            while (e.MoveNext()) yield return null;
            StringBuilder sb = new StringBuilder();
            sb.AppendLineEx("-- this source code was auto-generated by pure lua, do not modify it");
            sb.AppendLine("local this={}");
            sb.AppendLine("local t");
            e = ExportList(sb);
            while (e.MoveNext()) yield return null;
            sb.AppendLine("return this");
            EditorUtility.ClearProgressBar();
            WriteFile(sb);
        }

        private IEnumerator CollectExports() {
            if (exports == null) {
                exports = new List<Type>();
                IEnumerable<Assembly> assemblies = UnityEditorReflectionTool.GetCustomAssembles().ToArray();
                int count = 0;
                int total = assemblies.Count();
                foreach (
                    IEnumerable<Type> types in
                        assemblies.Select(a => a.GetTypes()).Select(ts => ts.Where(t => t.IsClass || t.IsEnum))) {
                    foreach (Type t in from t in types
                        let attributes = t.GetCustomAttributes(typeof (LuaExportAttribute), false)
                        where attributes.Length != 0
                        select t) {
                        exports.Add(t);
                    }
                    EditorUtility.DisplayProgressBar("Collecting", "Collect Types", (float) count/total);
                    count++;
                    yield return null;
                }
            }
        }

        private IEnumerator ExportList(StringBuilder sb) {
            for (int i = 0, len = exports.Count; i < len; i++) {
                Type t = exports[i];
                BuildType(t, sb);
                BuildMember(t, sb);
                BuildEnum(t, sb);
                EditorUtility.DisplayProgressBar("Building", "Building Types", (float) i/len);
                yield return null;
            }
        }

        private static void BuildType(Type t, StringBuilder sb) {
            object[] classSpace = t.GetCustomAttributes(typeof (LuaNameSpaceAttribute), false);
            if (classSpace.Length == 0) return;
            LuaNameSpaceAttribute att = classSpace[0] as LuaNameSpaceAttribute;
            if (att == null) return;
            string fullname = t.FullName;
            string simpleName = string.IsNullOrEmpty(att.keyName) ? t.Name : att.keyName;
            sb.AppendLine("t={}");
            sb.AppendFormat("this[\"{0}\"]=t\r\n", simpleName);
            sb.AppendFormat("t.class={0}\r\n", fullname);
            ConstructorInfo[] cs = t.GetConstructors(BindingFlags.Public | BindingFlags.Instance);
            if (cs.Length > 0) {
                sb.AppendFormat("t.new=function(...) return this[\"{0}\"].class(...) end\r\n",simpleName);
            }
        }

        private static void BuildMember(Type t, StringBuilder sb) {
            if (!t.IsClass) return;
            object[] classSpace = t.GetCustomAttributes(typeof (LuaNameSpaceAttribute), false);
            if (classSpace.Length == 0) return;
            LuaNameSpaceAttribute classAtt = classSpace[0] as LuaNameSpaceAttribute;
            if (classAtt == null) return;
            BindingFlags flag = BindingFlags.Static | BindingFlags.Public;
            MemberInfo[] methods = t.GetMembers(flag);
            foreach (MemberInfo m in methods) {
                object[] atts = m.GetCustomAttributes(typeof (LuaNameSpaceAttribute), false);
                if (atts.Length == 0) continue;
                LuaNameSpaceAttribute att = atts[0] as LuaNameSpaceAttribute;
                if (att == null) return;
                string simpleName = string.IsNullOrEmpty(att.keyName) ? m.Name : att.keyName;
                if (m is FieldInfo) {
                    FieldInfo f = (FieldInfo) m;
                    if (f.FieldType == typeof (string)) {
                        sb.AppendFormat("t.{0}=\"{1}\"\r\n", simpleName, f.GetValue(null));
                        continue;
                    }
                    if (f.FieldType.IsValueType) {
                        sb.AppendFormat("t.{0}={1}\r\n", simpleName, f.GetValue(null));
                        continue;
                    }
                }
                sb.AppendFormat("t.{0}=t.class.{0}\r\n", simpleName);
            }
        }

        private static void BuildEnum(Type t, StringBuilder sb) {
            if (!t.IsEnum) return;
            string[] enums = Enum.GetNames(t);
            object[] classSpace = t.GetCustomAttributes(typeof (LuaNameSpaceAttribute), false);
            if (classSpace.Length == 0) return;
            LuaNameSpaceAttribute classAtt = classSpace[0] as LuaNameSpaceAttribute;
            if (classAtt == null) return;
            foreach (var m in enums) {
                string up = EditGUITools.GetUpperCase(m, true);
                sb.AppendFormat("t.{0}=t.class.{1}\r\n", up, m);
            }
        }

        private static void WriteFile(StringBuilder sb) {
            string path = LuaConst.luaDir + "/Core";
            if (!Directory.Exists(path)) {
                Directory.CreateDirectory(path);
            }
            FileInfo fileInfo = new FileInfo(path + "/CSNamespace.lua");
            if (fileInfo.Exists) fileInfo.Delete();
            FileStream write = fileInfo.Open(FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.Read);
            using (write) {
                UTF8Encoding encode = new UTF8Encoding();
                string content = sb.ToString();
                byte[] ba = encode.GetBytes(content);
                write.Write(ba, 0, ba.Length);
                write.Flush();
            }
            AssetDatabase.Refresh();
        }
    }
}